
updater_mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000021c  20000000  080028e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003b0  2000021c  08002b04  0002021c  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  200005cc  08002b04  000205cc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a09b  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000185f  00000000  00000000  0002a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000758  00000000  00000000  0002bb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000680  00000000  00000000  0002c298  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000038a8  00000000  00000000  0002c918  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000311f  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000332df  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002614  00000000  00000000  0003335c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      000000df  00000000  00000000  00035970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000021c 	.word	0x2000021c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002694 	.word	0x08002694

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000220 	.word	0x20000220
 8000220:	08002694 	.word	0x08002694

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <strcmp>:
 8000234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800023c:	2a01      	cmp	r2, #1
 800023e:	bf28      	it	cs
 8000240:	429a      	cmpcs	r2, r3
 8000242:	d0f7      	beq.n	8000234 <strcmp>
 8000244:	1ad0      	subs	r0, r2, r3
 8000246:	4770      	bx	lr

08000248 <ETH_GetRxPktSize>:
  * @brief  Get the size of received the received packet.
  * @param  None
  * @retval framelength: received packet size 
  */
uint32_t ETH_GetRxPktSize(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
  uint32_t frameLength = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	607b      	str	r3, [r7, #4]
  if(((DMARxDescToGet->Status & ETH_DMARxDesc_OWN) == (uint32_t)RESET) &&
 8000252:	4b12      	ldr	r3, [pc, #72]	; (800029c <ETH_GetRxPktSize+0x54>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	db1a      	blt.n	8000292 <ETH_GetRxPktSize+0x4a>
     ((DMARxDescToGet->Status & ETH_DMARxDesc_ES) == (uint32_t)RESET) &&
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <ETH_GetRxPktSize+0x54>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if(((DMARxDescToGet->Status & ETH_DMARxDesc_OWN) == (uint32_t)RESET) &&
 8000266:	2b00      	cmp	r3, #0
 8000268:	d113      	bne.n	8000292 <ETH_GetRxPktSize+0x4a>
     ((DMARxDescToGet->Status & ETH_DMARxDesc_LS) != (uint32_t)RESET) &&
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <ETH_GetRxPktSize+0x54>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f403 7380 	and.w	r3, r3, #256	; 0x100
     ((DMARxDescToGet->Status & ETH_DMARxDesc_ES) == (uint32_t)RESET) &&
 8000274:	2b00      	cmp	r3, #0
 8000276:	d00c      	beq.n	8000292 <ETH_GetRxPktSize+0x4a>
     ((DMARxDescToGet->Status & ETH_DMARxDesc_FS) != (uint32_t)RESET))
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <ETH_GetRxPktSize+0x54>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f403 7300 	and.w	r3, r3, #512	; 0x200
     ((DMARxDescToGet->Status & ETH_DMARxDesc_LS) != (uint32_t)RESET) &&
 8000282:	2b00      	cmp	r3, #0
 8000284:	d005      	beq.n	8000292 <ETH_GetRxPktSize+0x4a>
  {
    /* Get the size of the packet: including 4 bytes of the CRC */
    frameLength = ETH_GetDMARxDescFrameLength(DMARxDescToGet);
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <ETH_GetRxPktSize+0x54>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4618      	mov	r0, r3
 800028c:	f000 f808 	bl	80002a0 <ETH_GetDMARxDescFrameLength>
 8000290:	6078      	str	r0, [r7, #4]
  }
 
 /* Return Frame Length */ 
 return frameLength;
 8000292:	687b      	ldr	r3, [r7, #4]
}
 8000294:	4618      	mov	r0, r3
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000370 	.word	0x20000370

080002a0 <ETH_GetDMARxDescFrameLength>:
  * @brief  Returns the specified DMA Rx Desc frame length.
  * @param  DMARxDesc: pointer on a DMA Rx descriptor                     
  * @retval The Rx descriptor received frame length.
  */
uint32_t ETH_GetDMARxDescFrameLength(ETH_DMADESCTypeDef *DMARxDesc)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  /* Return the Receive descriptor frame length */
  return ((DMARxDesc->Status & ETH_DMARxDesc_FL) >> ETH_DMARXDESC_FRAME_LENGTHSHIFT);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	0c1b      	lsrs	r3, r3, #16
 80002ae:	f3c3 030d 	ubfx	r3, r3, #0, #14
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <ETH_DMAClearITPendingBit>:
  *     @arg ETH_DMA_IT_TPS : Transmit process stopped interrupt 
  *     @arg ETH_DMA_IT_T   : Transmit interrupt
  * @retval None
  */
void ETH_DMAClearITPendingBit(uint32_t ETH_DMA_IT)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ETH_DMA_IT(ETH_DMA_IT));
  
  /* Clear the selected ETHERNET DMA IT */
  ETH->DMASR = (uint32_t) ETH_DMA_IT;
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <ETH_DMAClearITPendingBit+0x20>)
 80002c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80002ca:	3314      	adds	r3, #20
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	601a      	str	r2, [r3, #0]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40028000 	.word	0x40028000

080002e0 <low_level_input>:
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf *
low_level_input(struct netif *netif)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08a      	sub	sp, #40	; 0x28
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p, *q;
  u16_t len;
  int l =0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	623b      	str	r3, [r7, #32]
  FrameTypeDef frame;
  u8 *buffer;
  
  p = NULL;
 80002ec:	2300      	movs	r3, #0
 80002ee:	61fb      	str	r3, [r7, #28]
  frame = ETH_RxPkt_ChainMode();
 80002f0:	f107 0308 	add.w	r3, r7, #8
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 f86b 	bl	80003d0 <ETH_RxPkt_ChainMode>
  /* Obtain the size of the packet and put it into the "len"
     variable. */
  len = frame.length;
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	837b      	strh	r3, [r7, #26]
  
  buffer = (u8 *)frame.buffer;
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	617b      	str	r3, [r7, #20]

  /* We allocate a pbuf chain of pbufs from the pool. */
  p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8000302:	8b7b      	ldrh	r3, [r7, #26]
 8000304:	2203      	movs	r2, #3
 8000306:	4619      	mov	r1, r3
 8000308:	2003      	movs	r0, #3
 800030a:	f000 fa49 	bl	80007a0 <pbuf_alloc>
 800030e:	61f8      	str	r0, [r7, #28]

  if (p != NULL)
 8000310:	69fb      	ldr	r3, [r7, #28]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d018      	beq.n	8000348 <low_level_input+0x68>
  {
    for (q = p; q != NULL; q = q->next)
 8000316:	69fb      	ldr	r3, [r7, #28]
 8000318:	627b      	str	r3, [r7, #36]	; 0x24
 800031a:	e012      	b.n	8000342 <low_level_input+0x62>
    {
	  memcpy((u8_t*)q->payload, (u8_t*)&buffer[l], q->len);
 800031c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800031e:	6858      	ldr	r0, [r3, #4]
 8000320:	6a3b      	ldr	r3, [r7, #32]
 8000322:	697a      	ldr	r2, [r7, #20]
 8000324:	18d1      	adds	r1, r2, r3
 8000326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000328:	895b      	ldrh	r3, [r3, #10]
 800032a:	461a      	mov	r2, r3
 800032c:	f001 f866 	bl	80013fc <memcpy>
      l = l + q->len;
 8000330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000332:	895b      	ldrh	r3, [r3, #10]
 8000334:	461a      	mov	r2, r3
 8000336:	6a3b      	ldr	r3, [r7, #32]
 8000338:	4413      	add	r3, r2
 800033a:	623b      	str	r3, [r7, #32]
    for (q = p; q != NULL; q = q->next)
 800033c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	627b      	str	r3, [r7, #36]	; 0x24
 8000342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1e9      	bne.n	800031c <low_level_input+0x3c>
    }    
  }


  /* Set Own bit of the Rx descriptor Status: gives the buffer back to ETHERNET DMA */
  frame.descriptor->Status = ETH_DMARxDesc_OWN; 
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800034e:	601a      	str	r2, [r3, #0]
 
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((ETH->DMASR & ETH_DMASR_RBUS) != (u32)RESET)  
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <low_level_input+0xa4>)
 8000352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000356:	3314      	adds	r3, #20
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800035e:	2b00      	cmp	r3, #0
 8000360:	d00b      	beq.n	800037a <low_level_input+0x9a>
  {
    /* Clear RBUS ETHERNET DMA flag */
    ETH->DMASR = ETH_DMASR_RBUS;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <low_level_input+0xa4>)
 8000364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000368:	3314      	adds	r3, #20
 800036a:	2280      	movs	r2, #128	; 0x80
 800036c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    ETH->DMARPDR = 0;
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <low_level_input+0xa4>)
 8000370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000374:	3308      	adds	r3, #8
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
  }


  return p;
 800037a:	69fb      	ldr	r3, [r7, #28]
}
 800037c:	4618      	mov	r0, r3
 800037e:	3728      	adds	r7, #40	; 0x28
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40028000 	.word	0x40028000

08000388 <ethernetif_input>:
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
err_t
ethernetif_input(struct netif *netif)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f7ff ffa5 	bl	80002e0 <low_level_input>
 8000396:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return ERR_MEM;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d102      	bne.n	80003a4 <ethernetif_input+0x1c>
 800039e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003a2:	e011      	b.n	80003c8 <ethernetif_input+0x40>

  err = netif->input(p, netif);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	6879      	ldr	r1, [r7, #4]
 80003aa:	68f8      	ldr	r0, [r7, #12]
 80003ac:	4798      	blx	r3
 80003ae:	4603      	mov	r3, r0
 80003b0:	72fb      	strb	r3, [r7, #11]
  if (err != ERR_OK)
 80003b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d004      	beq.n	80003c4 <ethernetif_input+0x3c>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80003ba:	68f8      	ldr	r0, [r7, #12]
 80003bc:	f000 faec 	bl	8000998 <pbuf_free>
    p = NULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
  }

  return err;
 80003c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3710      	adds	r7, #16
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <ETH_RxPkt_ChainMode>:
* Input          : None
* Output         : None
* Return         : frame: farme size and location
*******************************************************************************/
FrameTypeDef ETH_RxPkt_ChainMode(void)
{ 
 80003d0:	b490      	push	{r4, r7}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  u32 framelength = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  FrameTypeDef frame = {0,0}; 
 80003dc:	f107 0308 	add.w	r3, r7, #8
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if((DMARxDescToGet->Status & ETH_DMARxDesc_OWN) != (u32)RESET)
 80003e8:	4b30      	ldr	r3, [pc, #192]	; (80004ac <ETH_RxPkt_ChainMode+0xdc>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	da1f      	bge.n	8000432 <ETH_RxPkt_ChainMode+0x62>
  {	
	frame.length = ETH_ERROR;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60bb      	str	r3, [r7, #8]

    if ((ETH->DMASR & ETH_DMASR_RBUS) != (u32)RESET)  
 80003f6:	4b2e      	ldr	r3, [pc, #184]	; (80004b0 <ETH_RxPkt_ChainMode+0xe0>)
 80003f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80003fc:	3314      	adds	r3, #20
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000404:	2b00      	cmp	r3, #0
 8000406:	d00b      	beq.n	8000420 <ETH_RxPkt_ChainMode+0x50>
    {
      /* Clear RBUS ETHERNET DMA flag */
      ETH->DMASR = ETH_DMASR_RBUS;
 8000408:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <ETH_RxPkt_ChainMode+0xe0>)
 800040a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800040e:	3314      	adds	r3, #20
 8000410:	2280      	movs	r2, #128	; 0x80
 8000412:	601a      	str	r2, [r3, #0]
      /* Resume DMA reception */
      ETH->DMARPDR = 0;
 8000414:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <ETH_RxPkt_ChainMode+0xe0>)
 8000416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800041a:	3308      	adds	r3, #8
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
    }

	/* Return error: OWN bit set */
    return frame; 
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	461c      	mov	r4, r3
 8000424:	f107 0308 	add.w	r3, r7, #8
 8000428:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800042c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000430:	e036      	b.n	80004a0 <ETH_RxPkt_ChainMode+0xd0>
  }
  
  if(((DMARxDescToGet->Status & ETH_DMARxDesc_ES) == (u32)RESET) && 
 8000432:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <ETH_RxPkt_ChainMode+0xdc>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800043c:	2b00      	cmp	r3, #0
 800043e:	d11a      	bne.n	8000476 <ETH_RxPkt_ChainMode+0xa6>
     ((DMARxDescToGet->Status & ETH_DMARxDesc_LS) != (u32)RESET) &&  
 8000440:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <ETH_RxPkt_ChainMode+0xdc>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if(((DMARxDescToGet->Status & ETH_DMARxDesc_ES) == (u32)RESET) && 
 800044a:	2b00      	cmp	r3, #0
 800044c:	d013      	beq.n	8000476 <ETH_RxPkt_ChainMode+0xa6>
     ((DMARxDescToGet->Status & ETH_DMARxDesc_FS) != (u32)RESET))  
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <ETH_RxPkt_ChainMode+0xdc>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f403 7300 	and.w	r3, r3, #512	; 0x200
     ((DMARxDescToGet->Status & ETH_DMARxDesc_LS) != (u32)RESET) &&  
 8000458:	2b00      	cmp	r3, #0
 800045a:	d00c      	beq.n	8000476 <ETH_RxPkt_ChainMode+0xa6>
  {      
    /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
    framelength = ((DMARxDescToGet->Status & ETH_DMARxDesc_FL) >> ETH_DMARxDesc_FrameLengthShift) - 4;
 800045c:	4b13      	ldr	r3, [pc, #76]	; (80004ac <ETH_RxPkt_ChainMode+0xdc>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	0c1b      	lsrs	r3, r3, #16
 8000464:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000468:	3b04      	subs	r3, #4
 800046a:	617b      	str	r3, [r7, #20]
	
	/* Get the addrees of the actual buffer */
	frame.buffer = DMARxDescToGet->Buffer1Addr;	
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <ETH_RxPkt_ChainMode+0xdc>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	e001      	b.n	800047a <ETH_RxPkt_ChainMode+0xaa>
  }
  else
  {
    /* Return ERROR */
    framelength = ETH_ERROR;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  }

  frame.length = framelength;
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	60bb      	str	r3, [r7, #8]


  frame.descriptor = DMARxDescToGet;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <ETH_RxPkt_ChainMode+0xdc>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	613b      	str	r3, [r7, #16]
  
  /* Update the ETHERNET DMA global Rx descriptor with next Rx decriptor */      
  /* Chained Mode */    
  /* Selects the next DMA Rx descriptor list for next buffer to read */ 
  DMARxDescToGet = (ETH_DMADESCTypeDef*) (DMARxDescToGet->Buffer2NextDescAddr);    
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <ETH_RxPkt_ChainMode+0xdc>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	461a      	mov	r2, r3
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <ETH_RxPkt_ChainMode+0xdc>)
 800048e:	601a      	str	r2, [r3, #0]
  
  /* Return Frame */
  return (frame);  
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	461c      	mov	r4, r3
 8000494:	f107 0308 	add.w	r3, r7, #8
 8000498:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800049c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	3718      	adds	r7, #24
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc90      	pop	{r4, r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000370 	.word	0x20000370
 80004b0:	40028000 	.word	0x40028000

080004b4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)&ram[mem->next];
 80004bc:	4b29      	ldr	r3, [pc, #164]	; (8000564 <plug_holes+0xb0>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	8812      	ldrh	r2, [r2, #0]
 80004c4:	4413      	add	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d01f      	beq.n	8000510 <plug_holes+0x5c>
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d11b      	bne.n	8000510 <plug_holes+0x5c>
 80004d8:	4b23      	ldr	r3, [pc, #140]	; (8000568 <plug_holes+0xb4>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d016      	beq.n	8000510 <plug_holes+0x5c>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80004e2:	4b22      	ldr	r3, [pc, #136]	; (800056c <plug_holes+0xb8>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d102      	bne.n	80004f2 <plug_holes+0x3e>
      lfree = mem;
 80004ec:	4a1f      	ldr	r2, [pc, #124]	; (800056c <plug_holes+0xb8>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	881a      	ldrh	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	801a      	strh	r2, [r3, #0]
    ((struct mem *)&ram[nmem->next])->prev = (u8_t *)mem - ram;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <plug_holes+0xb0>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	8812      	ldrh	r2, [r2, #0]
 8000502:	4413      	add	r3, r2
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4917      	ldr	r1, [pc, #92]	; (8000564 <plug_holes+0xb0>)
 8000508:	6809      	ldr	r1, [r1, #0]
 800050a:	1a52      	subs	r2, r2, r1
 800050c:	b292      	uxth	r2, r2
 800050e:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)&ram[mem->prev];
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <plug_holes+0xb0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	8852      	ldrh	r2, [r2, #2]
 8000518:	4413      	add	r3, r2
 800051a:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800051c:	68ba      	ldr	r2, [r7, #8]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	429a      	cmp	r2, r3
 8000522:	d01a      	beq.n	800055a <plug_holes+0xa6>
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d116      	bne.n	800055a <plug_holes+0xa6>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <plug_holes+0xb8>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	429a      	cmp	r2, r3
 8000534:	d102      	bne.n	800053c <plug_holes+0x88>
      lfree = pmem;
 8000536:	4a0d      	ldr	r2, [pc, #52]	; (800056c <plug_holes+0xb8>)
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	881a      	ldrh	r2, [r3, #0]
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	801a      	strh	r2, [r3, #0]
    ((struct mem *)&ram[mem->next])->prev = (u8_t *)pmem - ram;
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <plug_holes+0xb0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	8812      	ldrh	r2, [r2, #0]
 800054c:	4413      	add	r3, r2
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	4904      	ldr	r1, [pc, #16]	; (8000564 <plug_holes+0xb0>)
 8000552:	6809      	ldr	r1, [r1, #0]
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	805a      	strh	r2, [r3, #2]
  }
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	20000238 	.word	0x20000238
 8000568:	2000023c 	.word	0x2000023c
 800056c:	20000240 	.word	0x20000240

08000570 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d01f      	beq.n	80005be <mem_free+0x4e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | 2, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <mem_free+0x5c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	429a      	cmp	r2, r3
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <mem_free+0x5c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	429a      	cmp	r2, r3
 800058e:	d318      	bcc.n	80005c2 <mem_free+0x52>
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <mem_free+0x60>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	429a      	cmp	r2, r3
 8000598:	d213      	bcs.n	80005c2 <mem_free+0x52>
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3b08      	subs	r3, #8
 800059e:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2200      	movs	r2, #0
 80005a4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <mem_free+0x64>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d202      	bcs.n	80005b6 <mem_free+0x46>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80005b0:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <mem_free+0x64>)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - ((u8_t *)mem - ram));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	f7ff ff7c 	bl	80004b4 <plug_holes>
 80005bc:	e002      	b.n	80005c4 <mem_free+0x54>
    return;
 80005be:	bf00      	nop
 80005c0:	e000      	b.n	80005c4 <mem_free+0x54>
    return;
 80005c2:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000238 	.word	0x20000238
 80005d0:	2000023c 	.word	0x2000023c
 80005d4:	20000240 	.word	0x20000240

080005d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80005d8:	b480      	push	{r7}
 80005da:	b087      	sub	sp, #28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d101      	bne.n	80005ec <mem_malloc+0x14>
    return NULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	e08f      	b.n	800070c <mem_malloc+0x134>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	3303      	adds	r3, #3
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	f023 0303 	bic.w	r3, r3, #3
 80005f6:	80fb      	strh	r3, [r7, #6]

  if(size < MIN_SIZE_ALIGNED) {
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	2b0b      	cmp	r3, #11
 80005fc:	d801      	bhi.n	8000602 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80005fe:	230c      	movs	r3, #12
 8000600:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000608:	d901      	bls.n	800060e <mem_malloc+0x36>
    return NULL;
 800060a:	2300      	movs	r3, #0
 800060c:	e07e      	b.n	800070c <mem_malloc+0x134>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (u8_t *)lfree - ram; ptr < MEM_SIZE_ALIGNED - size;
 800060e:	4b42      	ldr	r3, [pc, #264]	; (8000718 <mem_malloc+0x140>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	4b41      	ldr	r3, [pc, #260]	; (800071c <mem_malloc+0x144>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	82fb      	strh	r3, [r7, #22]
 800061c:	e06f      	b.n	80006fe <mem_malloc+0x126>
         ptr = ((struct mem *)&ram[ptr])->next) {
      mem = (struct mem *)&ram[ptr];
 800061e:	4b3f      	ldr	r3, [pc, #252]	; (800071c <mem_malloc+0x144>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	8afb      	ldrh	r3, [r7, #22]
 8000624:	4413      	add	r3, r2
 8000626:	613b      	str	r3, [r7, #16]
        local_mem_free_count = mem_free_count;
      }
      mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d160      	bne.n	80006f2 <mem_malloc+0x11a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	8afb      	ldrh	r3, [r7, #22]
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	f1a3 0208 	sub.w	r2, r3, #8
 800063e:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8000640:	429a      	cmp	r2, r3
 8000642:	d356      	bcc.n	80006f2 <mem_malloc+0x11a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	8afb      	ldrh	r3, [r7, #22]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	f1a3 0208 	sub.w	r2, r3, #8
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	3314      	adds	r3, #20
 8000656:	429a      	cmp	r2, r3
 8000658:	d327      	bcc.n	80006aa <mem_malloc+0xd2>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800065a:	8afa      	ldrh	r2, [r7, #22]
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	4413      	add	r3, r2
 8000660:	b29b      	uxth	r3, r3
 8000662:	3308      	adds	r3, #8
 8000664:	81fb      	strh	r3, [r7, #14]
          /* create mem2 struct */
          mem2 = (struct mem *)&ram[ptr2];
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <mem_malloc+0x144>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	89fb      	ldrh	r3, [r7, #14]
 800066c:	4413      	add	r3, r2
 800066e:	60bb      	str	r3, [r7, #8]
          mem2->used = 0;
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	2200      	movs	r2, #0
 8000674:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	881a      	ldrh	r2, [r3, #0]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	8afa      	ldrh	r2, [r7, #22]
 8000682:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	89fa      	ldrh	r2, [r7, #14]
 8000688:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	2201      	movs	r2, #1
 800068e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000698:	d00a      	beq.n	80006b0 <mem_malloc+0xd8>
            ((struct mem *)&ram[mem2->next])->prev = ptr2;
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <mem_malloc+0x144>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	8812      	ldrh	r2, [r2, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	89fa      	ldrh	r2, [r7, #14]
 80006a6:	805a      	strh	r2, [r3, #2]
 80006a8:	e002      	b.n	80006b0 <mem_malloc+0xd8>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	2201      	movs	r2, #1
 80006ae:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - ((u8_t *)mem - ram));
        }

        if (mem == lfree) {
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <mem_malloc+0x140>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d118      	bne.n	80006ec <mem_malloc+0x114>
          /* Find next free block after mem and update lowest free pointer */
          while (lfree->used && lfree != ram_end) {
 80006ba:	e007      	b.n	80006cc <mem_malloc+0xf4>
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            lfree = (struct mem *)&ram[lfree->next];
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <mem_malloc+0x144>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a15      	ldr	r2, [pc, #84]	; (8000718 <mem_malloc+0x140>)
 80006c2:	6812      	ldr	r2, [r2, #0]
 80006c4:	8812      	ldrh	r2, [r2, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a13      	ldr	r2, [pc, #76]	; (8000718 <mem_malloc+0x140>)
 80006ca:	6013      	str	r3, [r2, #0]
          while (lfree->used && lfree != ram_end) {
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <mem_malloc+0x140>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d005      	beq.n	80006e2 <mem_malloc+0x10a>
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <mem_malloc+0x140>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <mem_malloc+0x148>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d1ec      	bne.n	80006bc <mem_malloc+0xe4>
          }
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <mem_malloc+0x140>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <mem_malloc+0x148>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	429a      	cmp	r2, r3
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	3308      	adds	r3, #8
 80006f0:	e00c      	b.n	800070c <mem_malloc+0x134>
         ptr = ((struct mem *)&ram[ptr])->next) {
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <mem_malloc+0x144>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	8afb      	ldrh	r3, [r7, #22]
 80006f8:	4413      	add	r3, r2
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	82fb      	strh	r3, [r7, #22]
    for (ptr = (u8_t *)lfree - ram; ptr < MEM_SIZE_ALIGNED - size;
 80006fe:	8afa      	ldrh	r2, [r7, #22]
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 8000706:	429a      	cmp	r2, r3
 8000708:	db89      	blt.n	800061e <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | 2, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_sem_signal(mem_sem);
  return NULL;
 800070a:	2300      	movs	r3, #0
}
 800070c:	4618      	mov	r0, r3
 800070e:	371c      	adds	r7, #28
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000240 	.word	0x20000240
 800071c:	20000238 	.word	0x20000238
 8000720:	2000023c 	.word	0x2000023c

08000724 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b08      	cmp	r3, #8
 8000732:	d901      	bls.n	8000738 <memp_malloc+0x14>
 8000734:	2300      	movs	r3, #0
 8000736:	e00e      	b.n	8000756 <memp_malloc+0x32>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4a09      	ldr	r2, [pc, #36]	; (8000760 <memp_malloc+0x3c>)
 800073c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000740:	60fb      	str	r3, [r7, #12]
  
  if (memp != NULL) {
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d005      	beq.n	8000754 <memp_malloc+0x30>
    memp_tab[type] = memp->next;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	6812      	ldr	r2, [r2, #0]
 800074e:	4904      	ldr	r1, [pc, #16]	; (8000760 <memp_malloc+0x3c>)
 8000750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    MEMP_STATS_INC(err, type);
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
 8000754:	68fb      	ldr	r3, [r7, #12]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000244 	.word	0x20000244

08000764 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d00d      	beq.n	8000792 <memp_free+0x2e>
    return;
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)((u8_t*)mem - MEMP_SIZE);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	4a07      	ldr	r2, [pc, #28]	; (800079c <memp_free+0x38>)
 800077e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	601a      	str	r2, [r3, #0]
  memp_tab[type] = memp;
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4904      	ldr	r1, [pc, #16]	; (800079c <memp_free+0x38>)
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000790:	e000      	b.n	8000794 <memp_free+0x30>
    return;
 8000792:	bf00      	nop
#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	20000244 	.word	0x20000244

080007a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
 80007aa:	460b      	mov	r3, r1
 80007ac:	80bb      	strh	r3, [r7, #4]
 80007ae:	4613      	mov	r3, r2
 80007b0:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  offset = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	82fb      	strh	r3, [r7, #22]
  switch (layer) {
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b03      	cmp	r3, #3
 80007ba:	d815      	bhi.n	80007e8 <pbuf_alloc+0x48>
 80007bc:	a201      	add	r2, pc, #4	; (adr r2, 80007c4 <pbuf_alloc+0x24>)
 80007be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c2:	bf00      	nop
 80007c4:	080007d5 	.word	0x080007d5
 80007c8:	080007db 	.word	0x080007db
 80007cc:	080007e1 	.word	0x080007e1
 80007d0:	080007ed 	.word	0x080007ed
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset += PBUF_TRANSPORT_HLEN;
 80007d4:	8afb      	ldrh	r3, [r7, #22]
 80007d6:	3314      	adds	r3, #20
 80007d8:	82fb      	strh	r3, [r7, #22]
    /* FALLTHROUGH */
  case PBUF_IP:
    /* add room for IP layer header */
    offset += PBUF_IP_HLEN;
 80007da:	8afb      	ldrh	r3, [r7, #22]
 80007dc:	3314      	adds	r3, #20
 80007de:	82fb      	strh	r3, [r7, #22]
    /* FALLTHROUGH */
  case PBUF_LINK:
    /* add room for link layer header */
    offset += PBUF_LINK_HLEN;
 80007e0:	8afb      	ldrh	r3, [r7, #22]
 80007e2:	330e      	adds	r3, #14
 80007e4:	82fb      	strh	r3, [r7, #22]
    break;
 80007e6:	e002      	b.n	80007ee <pbuf_alloc+0x4e>
  case PBUF_RAW:
    break;
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	e0d0      	b.n	800098e <pbuf_alloc+0x1ee>
    break;
 80007ec:	bf00      	nop
  }

  switch (type) {
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	f200 80c3 	bhi.w	800097c <pbuf_alloc+0x1dc>
 80007f6:	a201      	add	r2, pc, #4	; (adr r2, 80007fc <pbuf_alloc+0x5c>)
 80007f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fc:	080008eb 	.word	0x080008eb
 8000800:	08000949 	.word	0x08000949
 8000804:	08000949 	.word	0x08000949
 8000808:	0800080d 	.word	0x0800080d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    ALLOC_POOL_PBUF(p);
 800080c:	2008      	movs	r0, #8
 800080e:	f7ff ff89 	bl	8000724 <memp_malloc>
 8000812:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d101      	bne.n	800081e <pbuf_alloc+0x7e>
      return NULL;
 800081a:	2300      	movs	r3, #0
 800081c:	e0b7      	b.n	800098e <pbuf_alloc+0x1ee>
    }
    p->type = type;
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	79ba      	ldrb	r2, [r7, #6]
 8000822:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800082a:	8afb      	ldrh	r3, [r7, #22]
 800082c:	3310      	adds	r3, #16
 800082e:	69fa      	ldr	r2, [r7, #28]
 8000830:	4413      	add	r3, r2
 8000832:	3303      	adds	r3, #3
 8000834:	f023 0303 	bic.w	r3, r3, #3
 8000838:	461a      	mov	r2, r3
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	88ba      	ldrh	r2, [r7, #4]
 8000842:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8000844:	8afb      	ldrh	r3, [r7, #22]
 8000846:	3303      	adds	r3, #3
 8000848:	f023 0303 	bic.w	r3, r3, #3
 800084c:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000850:	3304      	adds	r3, #4
 8000852:	88ba      	ldrh	r2, [r7, #4]
 8000854:	4293      	cmp	r3, r2
 8000856:	bfa8      	it	ge
 8000858:	4613      	movge	r3, r2
 800085a:	b29a      	uxth	r2, r3
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	815a      	strh	r2, [r3, #10]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	2201      	movs	r2, #1
 8000864:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800086a:	88bb      	ldrh	r3, [r7, #4]
 800086c:	69fa      	ldr	r2, [r7, #28]
 800086e:	8952      	ldrh	r2, [r2, #10]
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8000874:	e035      	b.n	80008e2 <pbuf_alloc+0x142>
      ALLOC_POOL_PBUF(q);
 8000876:	2008      	movs	r0, #8
 8000878:	f7ff ff54 	bl	8000724 <memp_malloc>
 800087c:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d104      	bne.n	800088e <pbuf_alloc+0xee>
        /* free chain so far allocated */
        pbuf_free(p);
 8000884:	69f8      	ldr	r0, [r7, #28]
 8000886:	f000 f887 	bl	8000998 <pbuf_free>
        /* bail out unsuccesfully */
        return NULL;
 800088a:	2300      	movs	r3, #0
 800088c:	e07f      	b.n	800098e <pbuf_alloc+0x1ee>
      }
      q->type = type;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	79ba      	ldrb	r2, [r7, #6]
 8000892:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2200      	movs	r2, #0
 8000898:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80008b6:	4293      	cmp	r3, r2
 80008b8:	bf28      	it	cs
 80008ba:	4613      	movcs	r3, r2
 80008bc:	b29a      	uxth	r2, r3
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f103 0210 	add.w	r2, r3, #16
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2201      	movs	r2, #1
 80008d0:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	895b      	ldrh	r3, [r3, #10]
 80008d6:	461a      	mov	r2, r3
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	1a9b      	subs	r3, r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	dcc6      	bgt.n	8000876 <pbuf_alloc+0xd6>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80008e8:	e04a      	b.n	8000980 <pbuf_alloc+0x1e0>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 80008ea:	8afb      	ldrh	r3, [r7, #22]
 80008ec:	3313      	adds	r3, #19
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	f023 0303 	bic.w	r3, r3, #3
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	88bb      	ldrh	r3, [r7, #4]
 80008f8:	3303      	adds	r3, #3
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	f023 0303 	bic.w	r3, r3, #3
 8000900:	b29b      	uxth	r3, r3
 8000902:	4413      	add	r3, r2
 8000904:	b29b      	uxth	r3, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe66 	bl	80005d8 <mem_malloc>
 800090c:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <pbuf_alloc+0x178>
      return NULL;
 8000914:	2300      	movs	r3, #0
 8000916:	e03a      	b.n	800098e <pbuf_alloc+0x1ee>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8000918:	8afb      	ldrh	r3, [r7, #22]
 800091a:	3310      	adds	r3, #16
 800091c:	69fa      	ldr	r2, [r7, #28]
 800091e:	4413      	add	r3, r2
 8000920:	3303      	adds	r3, #3
 8000922:	f023 0303 	bic.w	r3, r3, #3
 8000926:	461a      	mov	r2, r3
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	88ba      	ldrh	r2, [r7, #4]
 8000930:	811a      	strh	r2, [r3, #8]
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	891a      	ldrh	r2, [r3, #8]
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
    p->type = type;
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	79ba      	ldrb	r2, [r7, #6]
 8000944:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8000946:	e01b      	b.n	8000980 <pbuf_alloc+0x1e0>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = memp_malloc(MEMP_PBUF);
 8000948:	2007      	movs	r0, #7
 800094a:	f7ff feeb 	bl	8000724 <memp_malloc>
 800094e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d101      	bne.n	800095a <pbuf_alloc+0x1ba>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 2, ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8000956:	2300      	movs	r3, #0
 8000958:	e019      	b.n	800098e <pbuf_alloc+0x1ee>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	88ba      	ldrh	r2, [r7, #4]
 8000964:	811a      	strh	r2, [r3, #8]
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	891a      	ldrh	r2, [r3, #8]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
    p->type = type;
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	79ba      	ldrb	r2, [r7, #6]
 8000978:	731a      	strb	r2, [r3, #12]
    break;
 800097a:	e001      	b.n	8000980 <pbuf_alloc+0x1e0>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
 800097c:	2300      	movs	r3, #0
 800097e:	e006      	b.n	800098e <pbuf_alloc+0x1ee>
  }
  /* set reference count */
  p->ref = 1;
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	2201      	movs	r2, #1
 8000984:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	2200      	movs	r2, #0
 800098a:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800098c:	69fb      	ldr	r3, [r7, #28]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3720      	adds	r7, #32
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop

08000998 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d101      	bne.n	80009aa <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 2, ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e041      	b.n	8000a2e <pbuf_free+0x96>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	7b1b      	ldrb	r3, [r3, #12]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d006      	beq.n	80009c0 <pbuf_free+0x28>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	7b1b      	ldrb	r3, [r3, #12]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d002      	beq.n	80009c0 <pbuf_free+0x28>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	7b1b      	ldrb	r3, [r3, #12]
 80009be:	2b02      	cmp	r3, #2
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80009c4:	e02f      	b.n	8000a26 <pbuf_free+0x8e>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	89db      	ldrh	r3, [r3, #14]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	81da      	strh	r2, [r3, #14]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	89db      	ldrh	r3, [r3, #14]
 80009d6:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80009d8:	8abb      	ldrh	r3, [r7, #20]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d121      	bne.n	8000a22 <pbuf_free+0x8a>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | 2, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7b1b      	ldrb	r3, [r3, #12]
 80009e8:	81fb      	strh	r3, [r7, #14]
      /* is this a pbuf from the pool? */
      if (type == PBUF_POOL) {
 80009ea:	89fb      	ldrh	r3, [r7, #14]
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d104      	bne.n	80009fa <pbuf_free+0x62>
        memp_free(MEMP_PBUF_POOL, p);
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	2008      	movs	r0, #8
 80009f4:	f7ff feb6 	bl	8000764 <memp_free>
 80009f8:	e00d      	b.n	8000a16 <pbuf_free+0x7e>
      /* is this a ROM or RAM referencing pbuf? */
      } else if (type == PBUF_ROM || type == PBUF_REF) {
 80009fa:	89fb      	ldrh	r3, [r7, #14]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d002      	beq.n	8000a06 <pbuf_free+0x6e>
 8000a00:	89fb      	ldrh	r3, [r7, #14]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d104      	bne.n	8000a10 <pbuf_free+0x78>
        memp_free(MEMP_PBUF, p);
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	2007      	movs	r0, #7
 8000a0a:	f7ff feab 	bl	8000764 <memp_free>
 8000a0e:	e002      	b.n	8000a16 <pbuf_free+0x7e>
      /* type == PBUF_RAM */
      } else {
        mem_free(p);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff fdad 	bl	8000570 <mem_free>
      }
      count++;
 8000a16:	7dfb      	ldrb	r3, [r7, #23]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	e001      	b.n	8000a26 <pbuf_free+0x8e>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | 2, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1cc      	bne.n	80009c6 <pbuf_free+0x2e>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8000a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b084      	sub	sp, #16
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  while (q) {
 8000a3e:	e00d      	b.n	8000a5c <free_etharp_q+0x26>
    r = q;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	60fb      	str	r3, [r7, #12]
    q = q->next;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	607b      	str	r3, [r7, #4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
    pbuf_free(r->p);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ffa2 	bl	8000998 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8000a54:	68f9      	ldr	r1, [r7, #12]
 8000a56:	2006      	movs	r0, #6
 8000a58:	f7ff fe84 	bl	8000764 <memp_free>
  while (q) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1ee      	bne.n	8000a40 <free_etharp_q+0xa>
  }
}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL microseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8000a72:	2300      	movs	r3, #0
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	e06f      	b.n	8000b58 <etharp_tmr+0xec>
    arp_table[i].ctime++;
 8000a78:	79fa      	ldrb	r2, [r7, #7]
 8000a7a:	493b      	ldr	r1, [pc, #236]	; (8000b68 <etharp_tmr+0xfc>)
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	440b      	add	r3, r1
 8000a86:	330f      	adds	r3, #15
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	b2d8      	uxtb	r0, r3
 8000a8e:	4936      	ldr	r1, [pc, #216]	; (8000b68 <etharp_tmr+0xfc>)
 8000a90:	4613      	mov	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	440b      	add	r3, r1
 8000a9a:	330f      	adds	r3, #15
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	701a      	strb	r2, [r3, #0]
    if (((arp_table[i].state == ETHARP_STATE_STABLE) &&
 8000aa0:	79fa      	ldrb	r2, [r7, #7]
 8000aa2:	4931      	ldr	r1, [pc, #196]	; (8000b68 <etharp_tmr+0xfc>)
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	440b      	add	r3, r1
 8000aae:	330e      	adds	r3, #14
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d10a      	bne.n	8000acc <etharp_tmr+0x60>
         (arp_table[i].ctime >= ARP_MAXAGE)) ||
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	492b      	ldr	r1, [pc, #172]	; (8000b68 <etharp_tmr+0xfc>)
 8000aba:	4613      	mov	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	330f      	adds	r3, #15
 8000ac6:	781b      	ldrb	r3, [r3, #0]
    if (((arp_table[i].state == ETHARP_STATE_STABLE) &&
 8000ac8:	2bef      	cmp	r3, #239	; 0xef
 8000aca:	d815      	bhi.n	8000af8 <etharp_tmr+0x8c>
        ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8000acc:	79fa      	ldrb	r2, [r7, #7]
 8000ace:	4926      	ldr	r1, [pc, #152]	; (8000b68 <etharp_tmr+0xfc>)
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	440b      	add	r3, r1
 8000ada:	330e      	adds	r3, #14
 8000adc:	781b      	ldrb	r3, [r3, #0]
         (arp_table[i].ctime >= ARP_MAXAGE)) ||
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d132      	bne.n	8000b48 <etharp_tmr+0xdc>
         (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	4920      	ldr	r1, [pc, #128]	; (8000b68 <etharp_tmr+0xfc>)
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	4413      	add	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	440b      	add	r3, r1
 8000af0:	330f      	adds	r3, #15
 8000af2:	781b      	ldrb	r3, [r3, #0]
        ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d927      	bls.n	8000b48 <etharp_tmr+0xdc>
      /* clean up entries that have just been expired */
      /* remove from SNMP ARP index tree */
      snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
#if ARP_QUEUEING
      /* and empty packet queue */
      if (arp_table[i].q != NULL) {
 8000af8:	79fa      	ldrb	r2, [r7, #7]
 8000afa:	491b      	ldr	r1, [pc, #108]	; (8000b68 <etharp_tmr+0xfc>)
 8000afc:	4613      	mov	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	440b      	add	r3, r1
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d013      	beq.n	8000b34 <etharp_tmr+0xc8>
        /* remove all queued packets */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
        free_etharp_q(arp_table[i].q);
 8000b0c:	79fa      	ldrb	r2, [r7, #7]
 8000b0e:	4916      	ldr	r1, [pc, #88]	; (8000b68 <etharp_tmr+0xfc>)
 8000b10:	4613      	mov	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	440b      	add	r3, r1
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff8a 	bl	8000a36 <free_etharp_q>
        arp_table[i].q = NULL;
 8000b22:	79fa      	ldrb	r2, [r7, #7]
 8000b24:	4910      	ldr	r1, [pc, #64]	; (8000b68 <etharp_tmr+0xfc>)
 8000b26:	4613      	mov	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	440b      	add	r3, r1
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
      }
#endif
      /* recycle entry for re-use */      
      arp_table[i].state = ETHARP_STATE_EMPTY;
 8000b34:	79fa      	ldrb	r2, [r7, #7]
 8000b36:	490c      	ldr	r1, [pc, #48]	; (8000b68 <etharp_tmr+0xfc>)
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	440b      	add	r3, r1
 8000b42:	330e      	adds	r3, #14
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
    }
#if ARP_QUEUEING
    /* still pending entry? (not expired) */
    if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8000b48:	79fa      	ldrb	r2, [r7, #7]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	3301      	adds	r3, #1
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	2b09      	cmp	r3, #9
 8000b5c:	d98c      	bls.n	8000a78 <etharp_tmr+0xc>
        /* resend an ARP query here? */
    }
#endif
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000268 	.word	0x20000268

08000b6c <premain>:
void HsiPllConfig(void);
void HsePllConfig(void);



void premain(void){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
 
    ResetRcc();
 8000b70:	f000 f806 	bl	8000b80 <ResetRcc>
    ClockConfig(HSE_PLL);
 8000b74:	2002      	movs	r0, #2
 8000b76:	f000 f835 	bl	8000be4 <ClockConfig>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <ResetRcc>:





void ResetRcc(void){
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

    /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
    
    RCC->CFGR &= (uint32_t)0xF0FF0000;
 8000b84:	4915      	ldr	r1, [pc, #84]	; (8000bdc <ResetRcc+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <ResetRcc+0x5c>)
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <ResetRcc+0x60>)
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	604b      	str	r3, [r1, #4]
    
    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b90:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <ResetRcc+0x5c>)
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <ResetRcc+0x5c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b9e:	6013      	str	r3, [r2, #0]
    
    /* Reset HSEBYP bit */
    RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ba0:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <ResetRcc+0x5c>)
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <ResetRcc+0x5c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000baa:	6013      	str	r3, [r2, #0]
    
    /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
    RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000bac:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <ResetRcc+0x5c>)
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <ResetRcc+0x5c>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000bb6:	6053      	str	r3, [r2, #4]
    
    
    /* Reset PLL2ON and PLL3ON bits */
    RCC->CR &= (uint32_t)0xEBFFFFFF;
 8000bb8:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <ResetRcc+0x5c>)
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <ResetRcc+0x5c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8000bc2:	6013      	str	r3, [r2, #0]
    
    /* Disable all interrupts and clear pending bits  */
    RCC->CIR = 0x00FF0000;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <ResetRcc+0x5c>)
 8000bc6:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000bca:	609a      	str	r2, [r3, #8]
    
    /* Reset CFGR2 register */
    RCC->CFGR2 = 0x00000000;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <ResetRcc+0x5c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	f0ff0000 	.word	0xf0ff0000

08000be4 <ClockConfig>:





void ClockConfig(ClockSource clkSource){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
    switch (clkSource){
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d817      	bhi.n	8000c24 <ClockConfig+0x40>
 8000bf4:	a201      	add	r2, pc, #4	; (adr r2, 8000bfc <ClockConfig+0x18>)
 8000bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfa:	bf00      	nop
 8000bfc:	08000c0d 	.word	0x08000c0d
 8000c00:	08000c13 	.word	0x08000c13
 8000c04:	08000c1f 	.word	0x08000c1f
 8000c08:	08000c19 	.word	0x08000c19
    case HSI:
        HsiConfig(); 
 8000c0c:	f000 f812 	bl	8000c34 <HsiConfig>
        break;
 8000c10:	e00b      	b.n	8000c2a <ClockConfig+0x46>
    case HSE:
        HseConfig(); 
 8000c12:	f000 f81d 	bl	8000c50 <HseConfig>
        break;
 8000c16:	e008      	b.n	8000c2a <ClockConfig+0x46>
    case HSI_PLL:
        HsiPllConfig(); 
 8000c18:	f000 f866 	bl	8000ce8 <HsiPllConfig>
        break;
 8000c1c:	e005      	b.n	8000c2a <ClockConfig+0x46>
    case HSE_PLL:
        HsePllConfig(); 
 8000c1e:	f000 f869 	bl	8000cf4 <HsePllConfig>
        break;
 8000c22:	e002      	b.n	8000c2a <ClockConfig+0x46>
    default:
        HsiConfig();
 8000c24:	f000 f806 	bl	8000c34 <HsiConfig>
        break;
 8000c28:	bf00      	nop
    }
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop

08000c34 <HsiConfig>:



void HsiConfig(void){
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
    systemCoreClock = HSI_Value;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HsiConfig+0x14>)
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HsiConfig+0x18>)
 8000c3c:	601a      	str	r2, [r3, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	2000037c 	.word	0x2000037c
 8000c4c:	007a1200 	.word	0x007a1200

08000c50 <HseConfig>:



void HseConfig(void){
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
    uint32_t timeoutCounter = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
    uint32_t hseStatus = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]

    RCC->CR |= ((uint32_t)RCC_CR_HSEON);// Enable HSE
 8000c5e:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <HseConfig+0x84>)
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <HseConfig+0x84>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c68:	6013      	str	r3, [r2, #0]

    while((hseStatus == 0) && (timeoutCounter != HSEStartUp_TimeOut)){// wait until HSE is started
 8000c6a:	e007      	b.n	8000c7c <HseConfig+0x2c>
        hseStatus = RCC->CR & RCC_CR_HSERDY;// Get HSE status
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HseConfig+0x84>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c74:	603b      	str	r3, [r7, #0]
        timeoutCounter++;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
    while((hseStatus == 0) && (timeoutCounter != HSEStartUp_TimeOut)){// wait until HSE is started
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <HseConfig+0x3a>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000c88:	d1f0      	bne.n	8000c6c <HseConfig+0x1c>
    }

    if(hseStatus !=0){
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d019      	beq.n	8000cc4 <HseConfig+0x74>
        // Configure Flash prefetch, half-cycle access  and wait state
        FLASH->ACR = FLASH_ACR_PRFTBE |  FLASH_ACR_HLFCYA | FLASH_ACR_LATENCY_2; 
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HseConfig+0x88>)
 8000c92:	221a      	movs	r2, #26
 8000c94:	601a      	str	r2, [r3, #0]
        
        //Set HSE as clock source
        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));// Clear mask
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HseConfig+0x84>)
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HseConfig+0x84>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f023 0303 	bic.w	r3, r3, #3
 8000ca0:	6053      	str	r3, [r2, #4]
        RCC->CFGR |= RCC_CFGR_SW_HSE;
 8000ca2:	4a0c      	ldr	r2, [pc, #48]	; (8000cd4 <HseConfig+0x84>)
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HseConfig+0x84>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
        
        // wait until HSE is not selected as clk source
        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_HSE);
 8000cae:	bf00      	nop
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HseConfig+0x84>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 030c 	and.w	r3, r3, #12
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d1f9      	bne.n	8000cb0 <HseConfig+0x60>

        systemCoreClock = HSE_Value;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <HseConfig+0x8c>)
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HseConfig+0x90>)
 8000cc0:	601a      	str	r2, [r3, #0]
    }
    else{
        systemCoreClock = HSI_Value;
    }
}
 8000cc2:	e002      	b.n	8000cca <HseConfig+0x7a>
        systemCoreClock = HSI_Value;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HseConfig+0x8c>)
 8000cc6:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HseConfig+0x94>)
 8000cc8:	601a      	str	r2, [r3, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40022000 	.word	0x40022000
 8000cdc:	2000037c 	.word	0x2000037c
 8000ce0:	017d7840 	.word	0x017d7840
 8000ce4:	007a1200 	.word	0x007a1200

08000ce8 <HsiPllConfig>:



void HsiPllConfig(void){
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
	//...
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <HsePllConfig>:



void HsePllConfig(void){
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
    uint32_t timeoutCounter = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
    uint32_t hseStatus = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]

    RCC->CR |= ((uint32_t)RCC_CR_HSEON);// Enable HSE
 8000d02:	4a3a      	ldr	r2, [pc, #232]	; (8000dec <HsePllConfig+0xf8>)
 8000d04:	4b39      	ldr	r3, [pc, #228]	; (8000dec <HsePllConfig+0xf8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d0c:	6013      	str	r3, [r2, #0]

    while((hseStatus == 0) && (timeoutCounter != HSEStartUp_TimeOut)){// wait until HSE is started
 8000d0e:	e007      	b.n	8000d20 <HsePllConfig+0x2c>
        hseStatus = (RCC->CR & RCC_CR_HSERDY);// Get HSE status
 8000d10:	4b36      	ldr	r3, [pc, #216]	; (8000dec <HsePllConfig+0xf8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d18:	603b      	str	r3, [r7, #0]
        timeoutCounter++;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
    while((hseStatus == 0) && (timeoutCounter != HSEStartUp_TimeOut)){// wait until HSE is started
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d103      	bne.n	8000d2e <HsePllConfig+0x3a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d2c:	d1f0      	bne.n	8000d10 <HsePllConfig+0x1c>
    }

    if(hseStatus !=0){
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d053      	beq.n	8000ddc <HsePllConfig+0xe8>
		    
        // Configure Flash prefetch, half-cycle access  and wait state
        FLASH->ACR = FLASH_ACR_PRFTBE |FLASH_ACR_LATENCY_2; //FLASH_ACR_HLFCYA |
 8000d34:	4b2e      	ldr	r3, [pc, #184]	; (8000df0 <HsePllConfig+0xfc>)
 8000d36:	2212      	movs	r2, #18
 8000d38:	601a      	str	r2, [r3, #0]

        // HCLK = SYSCLK/1, PCLK2 = HCLK/1, PCLK1 = HCLK/2. (AHB-72; APB2-72; APB1-36MHz)
        RCC->CFGR |= (RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE2_DIV1 | RCC_CFGR_PPRE1_DIV2);
 8000d3a:	4a2c      	ldr	r2, [pc, #176]	; (8000dec <HsePllConfig+0xf8>)
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <HsePllConfig+0xf8>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d44:	6053      	str	r3, [r2, #4]
        /* Configure PLLs ------------------------------------------------------*/
        /* Must use PLL2MUL for 25MHz HSE or can not achieve 72MHz See Clocks in RefMan*/
        /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
        /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
        /* SYSCLC = PREDIV1CLK * PLLMUL = 8*9=72 MHz */
        RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |   //RESET
 8000d46:	4929      	ldr	r1, [pc, #164]	; (8000dec <HsePllConfig+0xf8>)
 8000d48:	4b28      	ldr	r3, [pc, #160]	; (8000dec <HsePllConfig+0xf8>)
 8000d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <HsePllConfig+0x100>)
 8000d4e:	4013      	ands	r3, r2
 8000d50:	62cb      	str	r3, [r1, #44]	; 0x2c
                                  RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
        
        RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 8000d52:	4a26      	ldr	r2, [pc, #152]	; (8000dec <HsePllConfig+0xf8>)
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <HsePllConfig+0xf8>)
 8000d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d58:	f443 3383 	orr.w	r3, r3, #67072	; 0x10600
 8000d5c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000d60:	62d3      	str	r3, [r2, #44]	; 0x2c
                                 RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
       
        /* Enable PLL2 */
        RCC->CR |= RCC_CR_PLL2ON;
 8000d62:	4a22      	ldr	r2, [pc, #136]	; (8000dec <HsePllConfig+0xf8>)
 8000d64:	4b21      	ldr	r3, [pc, #132]	; (8000dec <HsePllConfig+0xf8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d6c:	6013      	str	r3, [r2, #0]
        /* Wait till PLL2 is ready */
        while((RCC->CR & RCC_CR_PLL2RDY) == 0);
 8000d6e:	bf00      	nop
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <HsePllConfig+0xf8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f9      	beq.n	8000d70 <HsePllConfig+0x7c>
        
        
       
        /* PLL configuration: PLLCLK = PREDIV1_CLK * 9 = 72 MHz */ 
        RCC->CFGR &= (uint32_t)~( RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL); //RESET
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <HsePllConfig+0xf8>)
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HsePllConfig+0xf8>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000d86:	6053      	str	r3, [r2, #4]
        RCC->CFGR |= (uint32_t)( RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL9); 
 8000d88:	4a18      	ldr	r2, [pc, #96]	; (8000dec <HsePllConfig+0xf8>)
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HsePllConfig+0xf8>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000d92:	6053      	str	r3, [r2, #4]
        
       
      
        
        /* Enable PLL */
        RCC->CR |= RCC_CR_PLLON;
 8000d94:	4a15      	ldr	r2, [pc, #84]	; (8000dec <HsePllConfig+0xf8>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HsePllConfig+0xf8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d9e:	6013      	str	r3, [r2, #0]
        while((RCC->CR &RCC_CR_PLLRDY) == 0);
 8000da0:	bf00      	nop
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HsePllConfig+0xf8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0f9      	beq.n	8000da2 <HsePllConfig+0xae>
        /*USB 48MHz clk is by default if 72MHz syclk; else see RCC->CR-> OTGFSPRE*/
//////
       
        
        //Set HSE_PLL as clock source
        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));// Clear mask
 8000dae:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <HsePllConfig+0xf8>)
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HsePllConfig+0xf8>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f023 0303 	bic.w	r3, r3, #3
 8000db8:	6053      	str	r3, [r2, #4]
        RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000dba:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <HsePllConfig+0xf8>)
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HsePllConfig+0xf8>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6053      	str	r3, [r2, #4]
        
        // wait untill HSE_PLL is not selected as clk source
        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000dc6:	bf00      	nop
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HsePllConfig+0xf8>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	d1f9      	bne.n	8000dc8 <HsePllConfig+0xd4>

        systemCoreClock = CORE_CLK;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HsePllConfig+0x104>)
 8000dd6:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <HsePllConfig+0x108>)
 8000dd8:	601a      	str	r2, [r3, #0]
    else{
        systemCoreClock = HSI_Value;
    }
    

}
 8000dda:	e002      	b.n	8000de2 <HsePllConfig+0xee>
        systemCoreClock = HSI_Value;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HsePllConfig+0x104>)
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HsePllConfig+0x10c>)
 8000de0:	601a      	str	r2, [r3, #0]
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40022000 	.word	0x40022000
 8000df4:	fffef000 	.word	0xfffef000
 8000df8:	2000037c 	.word	0x2000037c
 8000dfc:	044aa200 	.word	0x044aa200
 8000e00:	007a1200 	.word	0x007a1200

08000e04 <lwip_pkt_handle>:
/**
 * @brief Read a received packet from the Ethernet buffers and send it to the lwIP for handling.
 * @param none
 * @return none
 * */
void lwip_pkt_handle(void){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

	ethernetif_input(&netif);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <lwip_pkt_handle+0x10>)
 8000e0a:	f7ff fabd 	bl	8000388 <ethernetif_input>
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000380 	.word	0x20000380

08000e18 <lwip_periodic_handle>:
/**
 * @brief arp update periodic process; called in systick irq handler
 * @param localtime - local time, based on systick counter
 * @return none
 * */
void lwip_periodic_handle(__IO u32 localtime){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

	static uint32_t arp_timer = 0;
	if (localtime - arp_timer >= ARP_TMR_INTERVAL)
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <lwip_periodic_handle+0x2c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d904      	bls.n	8000e3a <lwip_periodic_handle+0x22>
	{
		arp_timer =  localtime;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <lwip_periodic_handle+0x2c>)
 8000e34:	6013      	str	r3, [r2, #0]
		etharp_tmr();
 8000e36:	f7ff fe19 	bl	8000a6c <etharp_tmr>
	}
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000330 	.word	0x20000330

08000e48 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0

	system_init();
 8000e4c:	f000 f8c0 	bl	8000fd0 <system_init>
	while(1){
 8000e50:	e7fe      	b.n	8000e50 <main+0x8>
	...

08000e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e5a:	e003      	b.n	8000e64 <LoopCopyDataInit>

08000e5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000e5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e62:	3104      	adds	r1, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000e68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e6c:	d3f6      	bcc.n	8000e5c <CopyDataInit>
	ldr	r2, =_sbss
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000e70:	e002      	b.n	8000e78 <LoopFillZerobss>

08000e72 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e74:	f842 3b04 	str.w	r3, [r2], #4

08000e78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000e7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e7c:	d3f9      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system intitialization function.*/
  	bl  SystemInit
 8000e7e:	f000 f8b3 	bl	8000fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f000 f991 	bl	80011a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e86:	f7ff ffdf 	bl	8000e48 <main>
	bx	lr
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e8c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000e90:	080028e8 	.word	0x080028e8
	ldr	r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e98:	2000021c 	.word	0x2000021c
	ldr	r2, =_sbss
 8000e9c:	2000021c 	.word	0x2000021c
	ldr	r3, = _ebss
 8000ea0:	200005cc 	.word	0x200005cc

08000ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC1_2_IRQHandler>

08000ea6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr

08000eb2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
	...

08000ef0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	localtime++;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Handler+0x1c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <SysTick_Handler+0x1c>)
 8000efc:	6013      	str	r3, [r2, #0]
	lwip_periodic_handle(localtime);
 8000efe:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <SysTick_Handler+0x1c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff88 	bl	8000e18 <lwip_periodic_handle>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	080011f1 	.word	0x080011f1

08000f10 <ETH_IRQHandler>:
 * @brief this function handles ETH interrupt request.
 * @param none
 * @return none
 * */
void ETH_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	while(ETH_GetRxPktSize() != 0)
 8000f14:	e001      	b.n	8000f1a <ETH_IRQHandler+0xa>
	{
		lwip_pkt_handle();
 8000f16:	f7ff ff75 	bl	8000e04 <lwip_pkt_handle>
	while(ETH_GetRxPktSize() != 0)
 8000f1a:	f7ff f995 	bl	8000248 <ETH_GetRxPktSize>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f8      	bne.n	8000f16 <ETH_IRQHandler+0x6>
	}

  ETH_DMAClearITPendingBit(ETH_DMA_IT_R);
 8000f24:	2040      	movs	r0, #64	; 0x40
 8000f26:	f7ff f9c9 	bl	80002bc <ETH_DMAClearITPendingBit>
  ETH_DMAClearITPendingBit(ETH_DMA_IT_NIS);
 8000f2a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f2e:	f7ff f9c5 	bl	80002bc <ETH_DMAClearITPendingBit>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da0b      	bge.n	8000f64 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000f4c:	490d      	ldr	r1, [pc, #52]	; (8000f84 <NVIC_SetPriority+0x4c>)
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 030f 	and.w	r3, r3, #15
 8000f54:	3b04      	subs	r3, #4
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000f62:	e009      	b.n	8000f78 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000f64:	4908      	ldr	r1, [pc, #32]	; (8000f88 <NVIC_SetPriority+0x50>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9a:	d301      	bcc.n	8000fa0 <SysTick_Config+0x14>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e011      	b.n	8000fc4 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000fac:	210f      	movs	r1, #15
 8000fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb2:	f7ff ffc1 	bl	8000f38 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <SysTick_Config+0x40>)
 8000fbe:	2207      	movs	r2, #7
 8000fc0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <system_init>:
#include "stm32f10x.h"
#include "premain.h"
/**
 * @brief the function is called from main in the very beginning
 * */
void system_init(void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

	premain();
 8000fd4:	f7ff fdca 	bl	8000b6c <premain>
	SysTick_Config(72000); //1000 ticks period or 1ms
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <system_init+0x14>)
 8000fda:	f7ff ffd7 	bl	8000f8c <SysTick_Config>
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	00011940 	.word	0x00011940

08000fe8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fec:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <SystemInit+0x70>)
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <SystemInit+0x70>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 8000ff8:	4917      	ldr	r1, [pc, #92]	; (8001058 <SystemInit+0x70>)
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <SystemInit+0x70>)
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <SystemInit+0x74>)
 8001000:	4013      	ands	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001004:	4a14      	ldr	r2, [pc, #80]	; (8001058 <SystemInit+0x70>)
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <SystemInit+0x70>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800100e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001012:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001014:	4a10      	ldr	r2, [pc, #64]	; (8001058 <SystemInit+0x70>)
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <SystemInit+0x70>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <SystemInit+0x70>)
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <SystemInit+0x70>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800102a:	6053      	str	r3, [r2, #4]

#ifdef STM32F10X_CL
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <SystemInit+0x70>)
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <SystemInit+0x70>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001036:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <SystemInit+0x70>)
 800103a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800103e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SystemInit+0x70>)
 8001042:	2200      	movs	r2, #0
 8001044:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001046:	f000 f80d 	bl	8001064 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <SystemInit+0x78>)
 800104c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001050:	609a      	str	r2, [r3, #8]
#endif 
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
 800105c:	f0ff0000 	.word	0xf0ff0000
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001068:	f000 f802 	bl	8001070 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800107e:	4a47      	ldr	r2, [pc, #284]	; (800119c <SetSysClockTo72+0x12c>)
 8001080:	4b46      	ldr	r3, [pc, #280]	; (800119c <SetSysClockTo72+0x12c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001088:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <SetSysClockTo72+0x12c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3301      	adds	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <SetSysClockTo72+0x38>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80010a6:	d1f0      	bne.n	800108a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80010a8:	4b3c      	ldr	r3, [pc, #240]	; (800119c <SetSysClockTo72+0x12c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80010b4:	2301      	movs	r3, #1
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	e001      	b.n	80010be <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d166      	bne.n	8001192 <SetSysClockTo72+0x122>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80010c4:	4a36      	ldr	r2, [pc, #216]	; (80011a0 <SetSysClockTo72+0x130>)
 80010c6:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <SetSysClockTo72+0x130>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80010d0:	4a33      	ldr	r2, [pc, #204]	; (80011a0 <SetSysClockTo72+0x130>)
 80010d2:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <SetSysClockTo72+0x130>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f023 0303 	bic.w	r3, r3, #3
 80010da:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80010dc:	4a30      	ldr	r2, [pc, #192]	; (80011a0 <SetSysClockTo72+0x130>)
 80010de:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <SetSysClockTo72+0x130>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80010e8:	4a2c      	ldr	r2, [pc, #176]	; (800119c <SetSysClockTo72+0x12c>)
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <SetSysClockTo72+0x12c>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80010f0:	4a2a      	ldr	r2, [pc, #168]	; (800119c <SetSysClockTo72+0x12c>)
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <SetSysClockTo72+0x12c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80010f8:	4a28      	ldr	r2, [pc, #160]	; (800119c <SetSysClockTo72+0x12c>)
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <SetSysClockTo72+0x12c>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001102:	6053      	str	r3, [r2, #4]
#ifdef STM32F10X_CL
    /* Configure PLLs ------------------------------------------------------*/
    /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
    /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
        
    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 8001104:	4925      	ldr	r1, [pc, #148]	; (800119c <SetSysClockTo72+0x12c>)
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <SetSysClockTo72+0x12c>)
 8001108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <SetSysClockTo72+0x134>)
 800110c:	4013      	ands	r3, r2
 800110e:	62cb      	str	r3, [r1, #44]	; 0x2c
                              RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 8001110:	4a22      	ldr	r2, [pc, #136]	; (800119c <SetSysClockTo72+0x12c>)
 8001112:	4b22      	ldr	r3, [pc, #136]	; (800119c <SetSysClockTo72+0x12c>)
 8001114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001116:	f443 3383 	orr.w	r3, r3, #67072	; 0x10600
 800111a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800111e:	62d3      	str	r3, [r2, #44]	; 0x2c
                             RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
  
    /* Enable PLL2 */
    RCC->CR |= RCC_CR_PLL2ON;
 8001120:	4a1e      	ldr	r2, [pc, #120]	; (800119c <SetSysClockTo72+0x12c>)
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <SetSysClockTo72+0x12c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800112a:	6013      	str	r3, [r2, #0]
    /* Wait till PLL2 is ready */
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 800112c:	bf00      	nop
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <SetSysClockTo72+0x12c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f9      	beq.n	800112e <SetSysClockTo72+0xbe>
    {
    }
    
   
    /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <SetSysClockTo72+0x12c>)
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <SetSysClockTo72+0x12c>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001144:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <SetSysClockTo72+0x12c>)
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <SetSysClockTo72+0x12c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001150:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <SetSysClockTo72+0x12c>)
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <SetSysClockTo72+0x12c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800115c:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800115e:	bf00      	nop
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <SetSysClockTo72+0x12c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f9      	beq.n	8001160 <SetSysClockTo72+0xf0>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800116c:	4a0b      	ldr	r2, [pc, #44]	; (800119c <SetSysClockTo72+0x12c>)
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <SetSysClockTo72+0x12c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f023 0303 	bic.w	r3, r3, #3
 8001176:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001178:	4a08      	ldr	r2, [pc, #32]	; (800119c <SetSysClockTo72+0x12c>)
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <SetSysClockTo72+0x12c>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f043 0302 	orr.w	r3, r3, #2
 8001182:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001184:	bf00      	nop
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <SetSysClockTo72+0x12c>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b08      	cmp	r3, #8
 8001190:	d1f9      	bne.n	8001186 <SetSysClockTo72+0x116>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	40021000 	.word	0x40021000
 80011a0:	40022000 	.word	0x40022000
 80011a4:	fffef000 	.word	0xfffef000

080011a8 <__libc_init_array>:
 80011a8:	b570      	push	{r4, r5, r6, lr}
 80011aa:	2500      	movs	r5, #0
 80011ac:	4e0c      	ldr	r6, [pc, #48]	; (80011e0 <__libc_init_array+0x38>)
 80011ae:	4c0d      	ldr	r4, [pc, #52]	; (80011e4 <__libc_init_array+0x3c>)
 80011b0:	1ba4      	subs	r4, r4, r6
 80011b2:	10a4      	asrs	r4, r4, #2
 80011b4:	42a5      	cmp	r5, r4
 80011b6:	d109      	bne.n	80011cc <__libc_init_array+0x24>
 80011b8:	f001 fa6c 	bl	8002694 <_init>
 80011bc:	2500      	movs	r5, #0
 80011be:	4e0a      	ldr	r6, [pc, #40]	; (80011e8 <__libc_init_array+0x40>)
 80011c0:	4c0a      	ldr	r4, [pc, #40]	; (80011ec <__libc_init_array+0x44>)
 80011c2:	1ba4      	subs	r4, r4, r6
 80011c4:	10a4      	asrs	r4, r4, #2
 80011c6:	42a5      	cmp	r5, r4
 80011c8:	d105      	bne.n	80011d6 <__libc_init_array+0x2e>
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
 80011cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011d0:	4798      	blx	r3
 80011d2:	3501      	adds	r5, #1
 80011d4:	e7ee      	b.n	80011b4 <__libc_init_array+0xc>
 80011d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011da:	4798      	blx	r3
 80011dc:	3501      	adds	r5, #1
 80011de:	e7f2      	b.n	80011c6 <__libc_init_array+0x1e>
 80011e0:	080028e0 	.word	0x080028e0
 80011e4:	080028e0 	.word	0x080028e0
 80011e8:	080028e0 	.word	0x080028e0
 80011ec:	080028e4 	.word	0x080028e4

080011f0 <localtime>:
 80011f0:	b538      	push	{r3, r4, r5, lr}
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <localtime+0x20>)
 80011f4:	4605      	mov	r5, r0
 80011f6:	681c      	ldr	r4, [r3, #0]
 80011f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011fa:	b91b      	cbnz	r3, 8001204 <localtime+0x14>
 80011fc:	2024      	movs	r0, #36	; 0x24
 80011fe:	f000 f8ed 	bl	80013dc <malloc>
 8001202:	63e0      	str	r0, [r4, #60]	; 0x3c
 8001204:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001206:	4628      	mov	r0, r5
 8001208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800120c:	f000 b802 	b.w	8001214 <localtime_r>
 8001210:	20000048 	.word	0x20000048

08001214 <localtime_r>:
 8001214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001218:	460c      	mov	r4, r1
 800121a:	4680      	mov	r8, r0
 800121c:	f000 fc36 	bl	8001a8c <__gettzinfo>
 8001220:	4621      	mov	r1, r4
 8001222:	4607      	mov	r7, r0
 8001224:	4640      	mov	r0, r8
 8001226:	f000 fc35 	bl	8001a94 <gmtime_r>
 800122a:	6946      	ldr	r6, [r0, #20]
 800122c:	4604      	mov	r4, r0
 800122e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8001232:	07b3      	lsls	r3, r6, #30
 8001234:	d105      	bne.n	8001242 <localtime_r+0x2e>
 8001236:	2264      	movs	r2, #100	; 0x64
 8001238:	fb96 f3f2 	sdiv	r3, r6, r2
 800123c:	fb02 6313 	mls	r3, r2, r3, r6
 8001240:	b9fb      	cbnz	r3, 8001282 <localtime_r+0x6e>
 8001242:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001246:	fb96 f5f3 	sdiv	r5, r6, r3
 800124a:	fb03 6515 	mls	r5, r3, r5, r6
 800124e:	fab5 f585 	clz	r5, r5
 8001252:	096d      	lsrs	r5, r5, #5
 8001254:	2230      	movs	r2, #48	; 0x30
 8001256:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <localtime_r+0x1c0>)
 8001258:	fb02 3505 	mla	r5, r2, r5, r3
 800125c:	f000 fa44 	bl	80016e8 <__tz_lock>
 8001260:	f000 fa44 	bl	80016ec <_tzset_unlocked>
 8001264:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <localtime_r+0x1c4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	b1e3      	cbz	r3, 80012a4 <localtime_r+0x90>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	429e      	cmp	r6, r3
 800126e:	d10a      	bne.n	8001286 <localtime_r+0x72>
 8001270:	6839      	ldr	r1, [r7, #0]
 8001272:	f8d8 3000 	ldr.w	r3, [r8]
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	b969      	cbnz	r1, 8001296 <localtime_r+0x82>
 800127a:	4293      	cmp	r3, r2
 800127c:	db0d      	blt.n	800129a <localtime_r+0x86>
 800127e:	2301      	movs	r3, #1
 8001280:	e010      	b.n	80012a4 <localtime_r+0x90>
 8001282:	2501      	movs	r5, #1
 8001284:	e7e6      	b.n	8001254 <localtime_r+0x40>
 8001286:	4630      	mov	r0, r6
 8001288:	f000 f986 	bl	8001598 <__tzcalc_limits>
 800128c:	2800      	cmp	r0, #0
 800128e:	d1ef      	bne.n	8001270 <localtime_r+0x5c>
 8001290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001294:	e006      	b.n	80012a4 <localtime_r+0x90>
 8001296:	4293      	cmp	r3, r2
 8001298:	db54      	blt.n	8001344 <localtime_r+0x130>
 800129a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800129c:	4293      	cmp	r3, r2
 800129e:	bfac      	ite	ge
 80012a0:	2300      	movge	r3, #0
 80012a2:	2301      	movlt	r3, #1
 80012a4:	6223      	str	r3, [r4, #32]
 80012a6:	6a23      	ldr	r3, [r4, #32]
 80012a8:	203c      	movs	r0, #60	; 0x3c
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80012b0:	bf0c      	ite	eq
 80012b2:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80012b4:	6a39      	ldrne	r1, [r7, #32]
 80012b6:	fb91 f6f3 	sdiv	r6, r1, r3
 80012ba:	fb03 1316 	mls	r3, r3, r6, r1
 80012be:	fb93 f2f0 	sdiv	r2, r3, r0
 80012c2:	fb00 3012 	mls	r0, r0, r2, r3
 80012c6:	6861      	ldr	r1, [r4, #4]
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	1a89      	subs	r1, r1, r2
 80012cc:	68a2      	ldr	r2, [r4, #8]
 80012ce:	1a1b      	subs	r3, r3, r0
 80012d0:	1b92      	subs	r2, r2, r6
 80012d2:	2b3b      	cmp	r3, #59	; 0x3b
 80012d4:	6023      	str	r3, [r4, #0]
 80012d6:	6061      	str	r1, [r4, #4]
 80012d8:	60a2      	str	r2, [r4, #8]
 80012da:	dd35      	ble.n	8001348 <localtime_r+0x134>
 80012dc:	3101      	adds	r1, #1
 80012de:	6061      	str	r1, [r4, #4]
 80012e0:	3b3c      	subs	r3, #60	; 0x3c
 80012e2:	6023      	str	r3, [r4, #0]
 80012e4:	6863      	ldr	r3, [r4, #4]
 80012e6:	2b3b      	cmp	r3, #59	; 0x3b
 80012e8:	dd34      	ble.n	8001354 <localtime_r+0x140>
 80012ea:	3201      	adds	r2, #1
 80012ec:	60a2      	str	r2, [r4, #8]
 80012ee:	3b3c      	subs	r3, #60	; 0x3c
 80012f0:	6063      	str	r3, [r4, #4]
 80012f2:	68a3      	ldr	r3, [r4, #8]
 80012f4:	2b17      	cmp	r3, #23
 80012f6:	dd33      	ble.n	8001360 <localtime_r+0x14c>
 80012f8:	69e2      	ldr	r2, [r4, #28]
 80012fa:	3b18      	subs	r3, #24
 80012fc:	3201      	adds	r2, #1
 80012fe:	61e2      	str	r2, [r4, #28]
 8001300:	69a2      	ldr	r2, [r4, #24]
 8001302:	60a3      	str	r3, [r4, #8]
 8001304:	3201      	adds	r2, #1
 8001306:	2a06      	cmp	r2, #6
 8001308:	bfc8      	it	gt
 800130a:	2200      	movgt	r2, #0
 800130c:	61a2      	str	r2, [r4, #24]
 800130e:	68e2      	ldr	r2, [r4, #12]
 8001310:	6923      	ldr	r3, [r4, #16]
 8001312:	3201      	adds	r2, #1
 8001314:	60e2      	str	r2, [r4, #12]
 8001316:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800131a:	428a      	cmp	r2, r1
 800131c:	dd0d      	ble.n	800133a <localtime_r+0x126>
 800131e:	3301      	adds	r3, #1
 8001320:	2b0c      	cmp	r3, #12
 8001322:	eba2 0201 	sub.w	r2, r2, r1
 8001326:	60e2      	str	r2, [r4, #12]
 8001328:	bf05      	ittet	eq
 800132a:	2200      	moveq	r2, #0
 800132c:	6963      	ldreq	r3, [r4, #20]
 800132e:	6123      	strne	r3, [r4, #16]
 8001330:	3301      	addeq	r3, #1
 8001332:	bf02      	ittt	eq
 8001334:	6122      	streq	r2, [r4, #16]
 8001336:	6163      	streq	r3, [r4, #20]
 8001338:	61e2      	streq	r2, [r4, #28]
 800133a:	f000 f9d6 	bl	80016ea <__tz_unlock>
 800133e:	4620      	mov	r0, r4
 8001340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001344:	2300      	movs	r3, #0
 8001346:	e7ad      	b.n	80012a4 <localtime_r+0x90>
 8001348:	2b00      	cmp	r3, #0
 800134a:	dacb      	bge.n	80012e4 <localtime_r+0xd0>
 800134c:	3901      	subs	r1, #1
 800134e:	6061      	str	r1, [r4, #4]
 8001350:	333c      	adds	r3, #60	; 0x3c
 8001352:	e7c6      	b.n	80012e2 <localtime_r+0xce>
 8001354:	2b00      	cmp	r3, #0
 8001356:	dacc      	bge.n	80012f2 <localtime_r+0xde>
 8001358:	3a01      	subs	r2, #1
 800135a:	60a2      	str	r2, [r4, #8]
 800135c:	333c      	adds	r3, #60	; 0x3c
 800135e:	e7c7      	b.n	80012f0 <localtime_r+0xdc>
 8001360:	2b00      	cmp	r3, #0
 8001362:	daea      	bge.n	800133a <localtime_r+0x126>
 8001364:	69e2      	ldr	r2, [r4, #28]
 8001366:	3318      	adds	r3, #24
 8001368:	3a01      	subs	r2, #1
 800136a:	61e2      	str	r2, [r4, #28]
 800136c:	69a2      	ldr	r2, [r4, #24]
 800136e:	60a3      	str	r3, [r4, #8]
 8001370:	3a01      	subs	r2, #1
 8001372:	bf48      	it	mi
 8001374:	2206      	movmi	r2, #6
 8001376:	61a2      	str	r2, [r4, #24]
 8001378:	68e2      	ldr	r2, [r4, #12]
 800137a:	3a01      	subs	r2, #1
 800137c:	60e2      	str	r2, [r4, #12]
 800137e:	2a00      	cmp	r2, #0
 8001380:	d1db      	bne.n	800133a <localtime_r+0x126>
 8001382:	6923      	ldr	r3, [r4, #16]
 8001384:	3b01      	subs	r3, #1
 8001386:	d405      	bmi.n	8001394 <localtime_r+0x180>
 8001388:	6123      	str	r3, [r4, #16]
 800138a:	6923      	ldr	r3, [r4, #16]
 800138c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8001390:	60e3      	str	r3, [r4, #12]
 8001392:	e7d2      	b.n	800133a <localtime_r+0x126>
 8001394:	230b      	movs	r3, #11
 8001396:	6123      	str	r3, [r4, #16]
 8001398:	6963      	ldr	r3, [r4, #20]
 800139a:	1e5a      	subs	r2, r3, #1
 800139c:	f012 0f03 	tst.w	r2, #3
 80013a0:	6162      	str	r2, [r4, #20]
 80013a2:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80013a6:	d105      	bne.n	80013b4 <localtime_r+0x1a0>
 80013a8:	2164      	movs	r1, #100	; 0x64
 80013aa:	fb92 f3f1 	sdiv	r3, r2, r1
 80013ae:	fb01 2313 	mls	r3, r1, r3, r2
 80013b2:	b963      	cbnz	r3, 80013ce <localtime_r+0x1ba>
 80013b4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80013b8:	fb92 f3f1 	sdiv	r3, r2, r1
 80013bc:	fb01 2313 	mls	r3, r1, r3, r2
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	095b      	lsrs	r3, r3, #5
 80013c6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80013ca:	61e3      	str	r3, [r4, #28]
 80013cc:	e7dd      	b.n	800138a <localtime_r+0x176>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e7f9      	b.n	80013c6 <localtime_r+0x1b2>
 80013d2:	bf00      	nop
 80013d4:	080026b8 	.word	0x080026b8
 80013d8:	2000035c 	.word	0x2000035c

080013dc <malloc>:
 80013dc:	4b02      	ldr	r3, [pc, #8]	; (80013e8 <malloc+0xc>)
 80013de:	4601      	mov	r1, r0
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	f000 b863 	b.w	80014ac <_malloc_r>
 80013e6:	bf00      	nop
 80013e8:	20000048 	.word	0x20000048

080013ec <free>:
 80013ec:	4b02      	ldr	r3, [pc, #8]	; (80013f8 <free+0xc>)
 80013ee:	4601      	mov	r1, r0
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	f000 b80f 	b.w	8001414 <_free_r>
 80013f6:	bf00      	nop
 80013f8:	20000048 	.word	0x20000048

080013fc <memcpy>:
 80013fc:	b510      	push	{r4, lr}
 80013fe:	1e43      	subs	r3, r0, #1
 8001400:	440a      	add	r2, r1
 8001402:	4291      	cmp	r1, r2
 8001404:	d100      	bne.n	8001408 <memcpy+0xc>
 8001406:	bd10      	pop	{r4, pc}
 8001408:	f811 4b01 	ldrb.w	r4, [r1], #1
 800140c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001410:	e7f7      	b.n	8001402 <memcpy+0x6>
	...

08001414 <_free_r>:
 8001414:	b538      	push	{r3, r4, r5, lr}
 8001416:	4605      	mov	r5, r0
 8001418:	2900      	cmp	r1, #0
 800141a:	d043      	beq.n	80014a4 <_free_r+0x90>
 800141c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001420:	1f0c      	subs	r4, r1, #4
 8001422:	2b00      	cmp	r3, #0
 8001424:	bfb8      	it	lt
 8001426:	18e4      	addlt	r4, r4, r3
 8001428:	f000 fbcc 	bl	8001bc4 <__malloc_lock>
 800142c:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <_free_r+0x94>)
 800142e:	6813      	ldr	r3, [r2, #0]
 8001430:	4610      	mov	r0, r2
 8001432:	b933      	cbnz	r3, 8001442 <_free_r+0x2e>
 8001434:	6063      	str	r3, [r4, #4]
 8001436:	6014      	str	r4, [r2, #0]
 8001438:	4628      	mov	r0, r5
 800143a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800143e:	f000 bbc2 	b.w	8001bc6 <__malloc_unlock>
 8001442:	42a3      	cmp	r3, r4
 8001444:	d90b      	bls.n	800145e <_free_r+0x4a>
 8001446:	6821      	ldr	r1, [r4, #0]
 8001448:	1862      	adds	r2, r4, r1
 800144a:	4293      	cmp	r3, r2
 800144c:	bf01      	itttt	eq
 800144e:	681a      	ldreq	r2, [r3, #0]
 8001450:	685b      	ldreq	r3, [r3, #4]
 8001452:	1852      	addeq	r2, r2, r1
 8001454:	6022      	streq	r2, [r4, #0]
 8001456:	6063      	str	r3, [r4, #4]
 8001458:	6004      	str	r4, [r0, #0]
 800145a:	e7ed      	b.n	8001438 <_free_r+0x24>
 800145c:	4613      	mov	r3, r2
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	b10a      	cbz	r2, 8001466 <_free_r+0x52>
 8001462:	42a2      	cmp	r2, r4
 8001464:	d9fa      	bls.n	800145c <_free_r+0x48>
 8001466:	6819      	ldr	r1, [r3, #0]
 8001468:	1858      	adds	r0, r3, r1
 800146a:	42a0      	cmp	r0, r4
 800146c:	d10b      	bne.n	8001486 <_free_r+0x72>
 800146e:	6820      	ldr	r0, [r4, #0]
 8001470:	4401      	add	r1, r0
 8001472:	1858      	adds	r0, r3, r1
 8001474:	4282      	cmp	r2, r0
 8001476:	6019      	str	r1, [r3, #0]
 8001478:	d1de      	bne.n	8001438 <_free_r+0x24>
 800147a:	6810      	ldr	r0, [r2, #0]
 800147c:	6852      	ldr	r2, [r2, #4]
 800147e:	4401      	add	r1, r0
 8001480:	6019      	str	r1, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	e7d8      	b.n	8001438 <_free_r+0x24>
 8001486:	d902      	bls.n	800148e <_free_r+0x7a>
 8001488:	230c      	movs	r3, #12
 800148a:	602b      	str	r3, [r5, #0]
 800148c:	e7d4      	b.n	8001438 <_free_r+0x24>
 800148e:	6820      	ldr	r0, [r4, #0]
 8001490:	1821      	adds	r1, r4, r0
 8001492:	428a      	cmp	r2, r1
 8001494:	bf01      	itttt	eq
 8001496:	6811      	ldreq	r1, [r2, #0]
 8001498:	6852      	ldreq	r2, [r2, #4]
 800149a:	1809      	addeq	r1, r1, r0
 800149c:	6021      	streq	r1, [r4, #0]
 800149e:	6062      	str	r2, [r4, #4]
 80014a0:	605c      	str	r4, [r3, #4]
 80014a2:	e7c9      	b.n	8001438 <_free_r+0x24>
 80014a4:	bd38      	pop	{r3, r4, r5, pc}
 80014a6:	bf00      	nop
 80014a8:	20000338 	.word	0x20000338

080014ac <_malloc_r>:
 80014ac:	b570      	push	{r4, r5, r6, lr}
 80014ae:	1ccd      	adds	r5, r1, #3
 80014b0:	f025 0503 	bic.w	r5, r5, #3
 80014b4:	3508      	adds	r5, #8
 80014b6:	2d0c      	cmp	r5, #12
 80014b8:	bf38      	it	cc
 80014ba:	250c      	movcc	r5, #12
 80014bc:	2d00      	cmp	r5, #0
 80014be:	4606      	mov	r6, r0
 80014c0:	db01      	blt.n	80014c6 <_malloc_r+0x1a>
 80014c2:	42a9      	cmp	r1, r5
 80014c4:	d903      	bls.n	80014ce <_malloc_r+0x22>
 80014c6:	230c      	movs	r3, #12
 80014c8:	6033      	str	r3, [r6, #0]
 80014ca:	2000      	movs	r0, #0
 80014cc:	bd70      	pop	{r4, r5, r6, pc}
 80014ce:	f000 fb79 	bl	8001bc4 <__malloc_lock>
 80014d2:	4a23      	ldr	r2, [pc, #140]	; (8001560 <_malloc_r+0xb4>)
 80014d4:	6814      	ldr	r4, [r2, #0]
 80014d6:	4621      	mov	r1, r4
 80014d8:	b991      	cbnz	r1, 8001500 <_malloc_r+0x54>
 80014da:	4c22      	ldr	r4, [pc, #136]	; (8001564 <_malloc_r+0xb8>)
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	b91b      	cbnz	r3, 80014e8 <_malloc_r+0x3c>
 80014e0:	4630      	mov	r0, r6
 80014e2:	f000 f841 	bl	8001568 <_sbrk_r>
 80014e6:	6020      	str	r0, [r4, #0]
 80014e8:	4629      	mov	r1, r5
 80014ea:	4630      	mov	r0, r6
 80014ec:	f000 f83c 	bl	8001568 <_sbrk_r>
 80014f0:	1c43      	adds	r3, r0, #1
 80014f2:	d126      	bne.n	8001542 <_malloc_r+0x96>
 80014f4:	230c      	movs	r3, #12
 80014f6:	4630      	mov	r0, r6
 80014f8:	6033      	str	r3, [r6, #0]
 80014fa:	f000 fb64 	bl	8001bc6 <__malloc_unlock>
 80014fe:	e7e4      	b.n	80014ca <_malloc_r+0x1e>
 8001500:	680b      	ldr	r3, [r1, #0]
 8001502:	1b5b      	subs	r3, r3, r5
 8001504:	d41a      	bmi.n	800153c <_malloc_r+0x90>
 8001506:	2b0b      	cmp	r3, #11
 8001508:	d90f      	bls.n	800152a <_malloc_r+0x7e>
 800150a:	600b      	str	r3, [r1, #0]
 800150c:	18cc      	adds	r4, r1, r3
 800150e:	50cd      	str	r5, [r1, r3]
 8001510:	4630      	mov	r0, r6
 8001512:	f000 fb58 	bl	8001bc6 <__malloc_unlock>
 8001516:	f104 000b 	add.w	r0, r4, #11
 800151a:	1d23      	adds	r3, r4, #4
 800151c:	f020 0007 	bic.w	r0, r0, #7
 8001520:	1ac3      	subs	r3, r0, r3
 8001522:	d01b      	beq.n	800155c <_malloc_r+0xb0>
 8001524:	425a      	negs	r2, r3
 8001526:	50e2      	str	r2, [r4, r3]
 8001528:	bd70      	pop	{r4, r5, r6, pc}
 800152a:	428c      	cmp	r4, r1
 800152c:	bf0b      	itete	eq
 800152e:	6863      	ldreq	r3, [r4, #4]
 8001530:	684b      	ldrne	r3, [r1, #4]
 8001532:	6013      	streq	r3, [r2, #0]
 8001534:	6063      	strne	r3, [r4, #4]
 8001536:	bf18      	it	ne
 8001538:	460c      	movne	r4, r1
 800153a:	e7e9      	b.n	8001510 <_malloc_r+0x64>
 800153c:	460c      	mov	r4, r1
 800153e:	6849      	ldr	r1, [r1, #4]
 8001540:	e7ca      	b.n	80014d8 <_malloc_r+0x2c>
 8001542:	1cc4      	adds	r4, r0, #3
 8001544:	f024 0403 	bic.w	r4, r4, #3
 8001548:	42a0      	cmp	r0, r4
 800154a:	d005      	beq.n	8001558 <_malloc_r+0xac>
 800154c:	1a21      	subs	r1, r4, r0
 800154e:	4630      	mov	r0, r6
 8001550:	f000 f80a 	bl	8001568 <_sbrk_r>
 8001554:	3001      	adds	r0, #1
 8001556:	d0cd      	beq.n	80014f4 <_malloc_r+0x48>
 8001558:	6025      	str	r5, [r4, #0]
 800155a:	e7d9      	b.n	8001510 <_malloc_r+0x64>
 800155c:	bd70      	pop	{r4, r5, r6, pc}
 800155e:	bf00      	nop
 8001560:	20000338 	.word	0x20000338
 8001564:	2000033c 	.word	0x2000033c

08001568 <_sbrk_r>:
 8001568:	b538      	push	{r3, r4, r5, lr}
 800156a:	2300      	movs	r3, #0
 800156c:	4c05      	ldr	r4, [pc, #20]	; (8001584 <_sbrk_r+0x1c>)
 800156e:	4605      	mov	r5, r0
 8001570:	4608      	mov	r0, r1
 8001572:	6023      	str	r3, [r4, #0]
 8001574:	f001 f880 	bl	8002678 <_sbrk>
 8001578:	1c43      	adds	r3, r0, #1
 800157a:	d102      	bne.n	8001582 <_sbrk_r+0x1a>
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	b103      	cbz	r3, 8001582 <_sbrk_r+0x1a>
 8001580:	602b      	str	r3, [r5, #0]
 8001582:	bd38      	pop	{r3, r4, r5, pc}
 8001584:	20000334 	.word	0x20000334

08001588 <strcpy>:
 8001588:	4603      	mov	r3, r0
 800158a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800158e:	f803 2b01 	strb.w	r2, [r3], #1
 8001592:	2a00      	cmp	r2, #0
 8001594:	d1f9      	bne.n	800158a <strcpy+0x2>
 8001596:	4770      	bx	lr

08001598 <__tzcalc_limits>:
 8001598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800159c:	4604      	mov	r4, r0
 800159e:	f000 fa75 	bl	8001a8c <__gettzinfo>
 80015a2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80015a6:	429c      	cmp	r4, r3
 80015a8:	f340 8098 	ble.w	80016dc <__tzcalc_limits+0x144>
 80015ac:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80015b0:	f240 126d 	movw	r2, #365	; 0x16d
 80015b4:	18e3      	adds	r3, r4, r3
 80015b6:	109b      	asrs	r3, r3, #2
 80015b8:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 80015bc:	fb02 3505 	mla	r5, r2, r5, r3
 80015c0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80015c4:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 80015c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80015cc:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80015d0:	441d      	add	r5, r3
 80015d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80015d6:	18a2      	adds	r2, r4, r2
 80015d8:	fb92 f2f3 	sdiv	r2, r2, r3
 80015dc:	fb94 f7f3 	sdiv	r7, r4, r3
 80015e0:	4415      	add	r5, r2
 80015e2:	2264      	movs	r2, #100	; 0x64
 80015e4:	fb03 4717 	mls	r7, r3, r7, r4
 80015e8:	fb94 f6f2 	sdiv	r6, r4, r2
 80015ec:	fab7 fe87 	clz	lr, r7
 80015f0:	4601      	mov	r1, r0
 80015f2:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 80015f6:	fb02 4616 	mls	r6, r2, r6, r4
 80015fa:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	f004 0303 	and.w	r3, r4, #3
 8001604:	6044      	str	r4, [r0, #4]
 8001606:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	7a0b      	ldrb	r3, [r1, #8]
 800160e:	2b4a      	cmp	r3, #74	; 0x4a
 8001610:	d123      	bne.n	800165a <__tzcalc_limits+0xc2>
 8001612:	694c      	ldr	r4, [r1, #20]
 8001614:	9a00      	ldr	r2, [sp, #0]
 8001616:	192b      	adds	r3, r5, r4
 8001618:	b902      	cbnz	r2, 800161c <__tzcalc_limits+0x84>
 800161a:	b906      	cbnz	r6, 800161e <__tzcalc_limits+0x86>
 800161c:	b9df      	cbnz	r7, 8001656 <__tzcalc_limits+0xbe>
 800161e:	2c3b      	cmp	r4, #59	; 0x3b
 8001620:	bfd4      	ite	le
 8001622:	2400      	movle	r4, #0
 8001624:	2401      	movgt	r4, #1
 8001626:	441c      	add	r4, r3
 8001628:	3c01      	subs	r4, #1
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <__tzcalc_limits+0x148>)
 800162c:	698a      	ldr	r2, [r1, #24]
 800162e:	fb03 2404 	mla	r4, r3, r4, r2
 8001632:	6a0b      	ldr	r3, [r1, #32]
 8001634:	441c      	add	r4, r3
 8001636:	9b01      	ldr	r3, [sp, #4]
 8001638:	f841 4f1c 	str.w	r4, [r1, #28]!
 800163c:	428b      	cmp	r3, r1
 800163e:	d1e5      	bne.n	800160c <__tzcalc_limits+0x74>
 8001640:	69c3      	ldr	r3, [r0, #28]
 8001642:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001644:	4293      	cmp	r3, r2
 8001646:	bfac      	ite	ge
 8001648:	2300      	movge	r3, #0
 800164a:	2301      	movlt	r3, #1
 800164c:	6003      	str	r3, [r0, #0]
 800164e:	2001      	movs	r0, #1
 8001650:	b003      	add	sp, #12
 8001652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001656:	2400      	movs	r4, #0
 8001658:	e7e5      	b.n	8001626 <__tzcalc_limits+0x8e>
 800165a:	2b44      	cmp	r3, #68	; 0x44
 800165c:	d102      	bne.n	8001664 <__tzcalc_limits+0xcc>
 800165e:	694b      	ldr	r3, [r1, #20]
 8001660:	18ec      	adds	r4, r5, r3
 8001662:	e7e2      	b.n	800162a <__tzcalc_limits+0x92>
 8001664:	9b00      	ldr	r3, [sp, #0]
 8001666:	bb7b      	cbnz	r3, 80016c8 <__tzcalc_limits+0x130>
 8001668:	2e00      	cmp	r6, #0
 800166a:	bf0c      	ite	eq
 800166c:	46f0      	moveq	r8, lr
 800166e:	f04f 0801 	movne.w	r8, #1
 8001672:	2230      	movs	r2, #48	; 0x30
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <__tzcalc_limits+0x14c>)
 8001676:	f04f 0901 	mov.w	r9, #1
 800167a:	fb02 3808 	mla	r8, r2, r8, r3
 800167e:	462b      	mov	r3, r5
 8001680:	68cc      	ldr	r4, [r1, #12]
 8001682:	f1a8 0a04 	sub.w	sl, r8, #4
 8001686:	45a1      	cmp	r9, r4
 8001688:	db20      	blt.n	80016cc <__tzcalc_limits+0x134>
 800168a:	2207      	movs	r2, #7
 800168c:	2c01      	cmp	r4, #1
 800168e:	bfb8      	it	lt
 8001690:	2401      	movlt	r4, #1
 8001692:	f103 0b04 	add.w	fp, r3, #4
 8001696:	fb9b faf2 	sdiv	sl, fp, r2
 800169a:	46a1      	mov	r9, r4
 800169c:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 80016a0:	694c      	ldr	r4, [r1, #20]
 80016a2:	ebab 0a0a 	sub.w	sl, fp, sl
 80016a6:	ebb4 0a0a 	subs.w	sl, r4, sl
 80016aa:	690c      	ldr	r4, [r1, #16]
 80016ac:	44e1      	add	r9, ip
 80016ae:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80016b2:	bf48      	it	mi
 80016b4:	4492      	addmi	sl, r2
 80016b6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80016ba:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 80016be:	4454      	add	r4, sl
 80016c0:	4544      	cmp	r4, r8
 80016c2:	da09      	bge.n	80016d8 <__tzcalc_limits+0x140>
 80016c4:	441c      	add	r4, r3
 80016c6:	e7b0      	b.n	800162a <__tzcalc_limits+0x92>
 80016c8:	46f0      	mov	r8, lr
 80016ca:	e7d2      	b.n	8001672 <__tzcalc_limits+0xda>
 80016cc:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80016d0:	f109 0901 	add.w	r9, r9, #1
 80016d4:	445b      	add	r3, fp
 80016d6:	e7d6      	b.n	8001686 <__tzcalc_limits+0xee>
 80016d8:	3c07      	subs	r4, #7
 80016da:	e7f1      	b.n	80016c0 <__tzcalc_limits+0x128>
 80016dc:	2000      	movs	r0, #0
 80016de:	e7b7      	b.n	8001650 <__tzcalc_limits+0xb8>
 80016e0:	00015180 	.word	0x00015180
 80016e4:	080026b8 	.word	0x080026b8

080016e8 <__tz_lock>:
 80016e8:	4770      	bx	lr

080016ea <__tz_unlock>:
 80016ea:	4770      	bx	lr

080016ec <_tzset_unlocked>:
 80016ec:	4b01      	ldr	r3, [pc, #4]	; (80016f4 <_tzset_unlocked+0x8>)
 80016ee:	6818      	ldr	r0, [r3, #0]
 80016f0:	f000 b802 	b.w	80016f8 <_tzset_unlocked_r>
 80016f4:	20000048 	.word	0x20000048

080016f8 <_tzset_unlocked_r>:
 80016f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016fc:	b08d      	sub	sp, #52	; 0x34
 80016fe:	4607      	mov	r7, r0
 8001700:	f000 f9c4 	bl	8001a8c <__gettzinfo>
 8001704:	49b1      	ldr	r1, [pc, #708]	; (80019cc <_tzset_unlocked_r+0x2d4>)
 8001706:	4605      	mov	r5, r0
 8001708:	4638      	mov	r0, r7
 800170a:	f000 f9b7 	bl	8001a7c <_getenv_r>
 800170e:	4eb0      	ldr	r6, [pc, #704]	; (80019d0 <_tzset_unlocked_r+0x2d8>)
 8001710:	4604      	mov	r4, r0
 8001712:	b970      	cbnz	r0, 8001732 <_tzset_unlocked_r+0x3a>
 8001714:	4baf      	ldr	r3, [pc, #700]	; (80019d4 <_tzset_unlocked_r+0x2dc>)
 8001716:	4ab0      	ldr	r2, [pc, #704]	; (80019d8 <_tzset_unlocked_r+0x2e0>)
 8001718:	6018      	str	r0, [r3, #0]
 800171a:	4bb0      	ldr	r3, [pc, #704]	; (80019dc <_tzset_unlocked_r+0x2e4>)
 800171c:	6018      	str	r0, [r3, #0]
 800171e:	4bb0      	ldr	r3, [pc, #704]	; (80019e0 <_tzset_unlocked_r+0x2e8>)
 8001720:	6830      	ldr	r0, [r6, #0]
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	f7ff fe61 	bl	80013ec <free>
 800172a:	6034      	str	r4, [r6, #0]
 800172c:	b00d      	add	sp, #52	; 0x34
 800172e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001732:	6831      	ldr	r1, [r6, #0]
 8001734:	2900      	cmp	r1, #0
 8001736:	d160      	bne.n	80017fa <_tzset_unlocked_r+0x102>
 8001738:	6830      	ldr	r0, [r6, #0]
 800173a:	f7ff fe57 	bl	80013ec <free>
 800173e:	4620      	mov	r0, r4
 8001740:	f7fe fd70 	bl	8000224 <strlen>
 8001744:	1c41      	adds	r1, r0, #1
 8001746:	4638      	mov	r0, r7
 8001748:	f7ff feb0 	bl	80014ac <_malloc_r>
 800174c:	6030      	str	r0, [r6, #0]
 800174e:	2800      	cmp	r0, #0
 8001750:	d158      	bne.n	8001804 <_tzset_unlocked_r+0x10c>
 8001752:	7823      	ldrb	r3, [r4, #0]
 8001754:	ae0a      	add	r6, sp, #40	; 0x28
 8001756:	2b3a      	cmp	r3, #58	; 0x3a
 8001758:	bf08      	it	eq
 800175a:	3401      	addeq	r4, #1
 800175c:	4633      	mov	r3, r6
 800175e:	4aa1      	ldr	r2, [pc, #644]	; (80019e4 <_tzset_unlocked_r+0x2ec>)
 8001760:	49a1      	ldr	r1, [pc, #644]	; (80019e8 <_tzset_unlocked_r+0x2f0>)
 8001762:	4620      	mov	r0, r4
 8001764:	f000 fa30 	bl	8001bc8 <siscanf>
 8001768:	2800      	cmp	r0, #0
 800176a:	dddf      	ble.n	800172c <_tzset_unlocked_r+0x34>
 800176c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800176e:	18e7      	adds	r7, r4, r3
 8001770:	5ce3      	ldrb	r3, [r4, r3]
 8001772:	2b2d      	cmp	r3, #45	; 0x2d
 8001774:	d14a      	bne.n	800180c <_tzset_unlocked_r+0x114>
 8001776:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800177a:	3701      	adds	r7, #1
 800177c:	f04f 0800 	mov.w	r8, #0
 8001780:	f10d 0a20 	add.w	sl, sp, #32
 8001784:	f10d 0b1e 	add.w	fp, sp, #30
 8001788:	9603      	str	r6, [sp, #12]
 800178a:	f8cd a008 	str.w	sl, [sp, #8]
 800178e:	9601      	str	r6, [sp, #4]
 8001790:	f8cd b000 	str.w	fp, [sp]
 8001794:	4633      	mov	r3, r6
 8001796:	aa07      	add	r2, sp, #28
 8001798:	4994      	ldr	r1, [pc, #592]	; (80019ec <_tzset_unlocked_r+0x2f4>)
 800179a:	4638      	mov	r0, r7
 800179c:	f8ad 801e 	strh.w	r8, [sp, #30]
 80017a0:	f8ad 8020 	strh.w	r8, [sp, #32]
 80017a4:	f000 fa10 	bl	8001bc8 <siscanf>
 80017a8:	4540      	cmp	r0, r8
 80017aa:	ddbf      	ble.n	800172c <_tzset_unlocked_r+0x34>
 80017ac:	213c      	movs	r1, #60	; 0x3c
 80017ae:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80017b2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80017b6:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80019f8 <_tzset_unlocked_r+0x300>
 80017ba:	fb01 2203 	mla	r2, r1, r3, r2
 80017be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80017c2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80017c6:	fb01 2303 	mla	r3, r1, r3, r2
 80017ca:	435c      	muls	r4, r3
 80017cc:	4b85      	ldr	r3, [pc, #532]	; (80019e4 <_tzset_unlocked_r+0x2ec>)
 80017ce:	622c      	str	r4, [r5, #32]
 80017d0:	4c83      	ldr	r4, [pc, #524]	; (80019e0 <_tzset_unlocked_r+0x2e8>)
 80017d2:	464a      	mov	r2, r9
 80017d4:	6023      	str	r3, [r4, #0]
 80017d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017d8:	4983      	ldr	r1, [pc, #524]	; (80019e8 <_tzset_unlocked_r+0x2f0>)
 80017da:	441f      	add	r7, r3
 80017dc:	4638      	mov	r0, r7
 80017de:	4633      	mov	r3, r6
 80017e0:	f000 f9f2 	bl	8001bc8 <siscanf>
 80017e4:	4540      	cmp	r0, r8
 80017e6:	dc16      	bgt.n	8001816 <_tzset_unlocked_r+0x11e>
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	6a2a      	ldr	r2, [r5, #32]
 80017ec:	6063      	str	r3, [r4, #4]
 80017ee:	4b79      	ldr	r3, [pc, #484]	; (80019d4 <_tzset_unlocked_r+0x2dc>)
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	4b7a      	ldr	r3, [pc, #488]	; (80019dc <_tzset_unlocked_r+0x2e4>)
 80017f4:	f8c3 8000 	str.w	r8, [r3]
 80017f8:	e798      	b.n	800172c <_tzset_unlocked_r+0x34>
 80017fa:	f7fe fd1b 	bl	8000234 <strcmp>
 80017fe:	2800      	cmp	r0, #0
 8001800:	d094      	beq.n	800172c <_tzset_unlocked_r+0x34>
 8001802:	e799      	b.n	8001738 <_tzset_unlocked_r+0x40>
 8001804:	4621      	mov	r1, r4
 8001806:	f7ff febf 	bl	8001588 <strcpy>
 800180a:	e7a2      	b.n	8001752 <_tzset_unlocked_r+0x5a>
 800180c:	2b2b      	cmp	r3, #43	; 0x2b
 800180e:	bf08      	it	eq
 8001810:	3701      	addeq	r7, #1
 8001812:	2401      	movs	r4, #1
 8001814:	e7b2      	b.n	800177c <_tzset_unlocked_r+0x84>
 8001816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001818:	f8c4 9004 	str.w	r9, [r4, #4]
 800181c:	18fc      	adds	r4, r7, r3
 800181e:	5cfb      	ldrb	r3, [r7, r3]
 8001820:	2b2d      	cmp	r3, #45	; 0x2d
 8001822:	f040 8092 	bne.w	800194a <_tzset_unlocked_r+0x252>
 8001826:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800182a:	3401      	adds	r4, #1
 800182c:	2300      	movs	r3, #0
 800182e:	9603      	str	r6, [sp, #12]
 8001830:	f8ad 301c 	strh.w	r3, [sp, #28]
 8001834:	f8ad 301e 	strh.w	r3, [sp, #30]
 8001838:	f8ad 3020 	strh.w	r3, [sp, #32]
 800183c:	930a      	str	r3, [sp, #40]	; 0x28
 800183e:	f8cd a008 	str.w	sl, [sp, #8]
 8001842:	9601      	str	r6, [sp, #4]
 8001844:	f8cd b000 	str.w	fp, [sp]
 8001848:	4633      	mov	r3, r6
 800184a:	aa07      	add	r2, sp, #28
 800184c:	4967      	ldr	r1, [pc, #412]	; (80019ec <_tzset_unlocked_r+0x2f4>)
 800184e:	4620      	mov	r0, r4
 8001850:	f000 f9ba 	bl	8001bc8 <siscanf>
 8001854:	2800      	cmp	r0, #0
 8001856:	dc7d      	bgt.n	8001954 <_tzset_unlocked_r+0x25c>
 8001858:	6a2b      	ldr	r3, [r5, #32]
 800185a:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800185e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8001860:	462f      	mov	r7, r5
 8001862:	f04f 0900 	mov.w	r9, #0
 8001866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001868:	441c      	add	r4, r3
 800186a:	7823      	ldrb	r3, [r4, #0]
 800186c:	2b2c      	cmp	r3, #44	; 0x2c
 800186e:	bf08      	it	eq
 8001870:	3401      	addeq	r4, #1
 8001872:	f894 8000 	ldrb.w	r8, [r4]
 8001876:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800187a:	d17b      	bne.n	8001974 <_tzset_unlocked_r+0x27c>
 800187c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	ab09      	add	r3, sp, #36	; 0x24
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	9603      	str	r6, [sp, #12]
 8001888:	9601      	str	r6, [sp, #4]
 800188a:	4633      	mov	r3, r6
 800188c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8001890:	4957      	ldr	r1, [pc, #348]	; (80019f0 <_tzset_unlocked_r+0x2f8>)
 8001892:	4620      	mov	r0, r4
 8001894:	f000 f998 	bl	8001bc8 <siscanf>
 8001898:	2803      	cmp	r0, #3
 800189a:	f47f af47 	bne.w	800172c <_tzset_unlocked_r+0x34>
 800189e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80018a2:	1e4b      	subs	r3, r1, #1
 80018a4:	2b0b      	cmp	r3, #11
 80018a6:	f63f af41 	bhi.w	800172c <_tzset_unlocked_r+0x34>
 80018aa:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80018ae:	1e53      	subs	r3, r2, #1
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	f63f af3b 	bhi.w	800172c <_tzset_unlocked_r+0x34>
 80018b6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	f63f af36 	bhi.w	800172c <_tzset_unlocked_r+0x34>
 80018c0:	f887 8008 	strb.w	r8, [r7, #8]
 80018c4:	60f9      	str	r1, [r7, #12]
 80018c6:	613a      	str	r2, [r7, #16]
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018cc:	eb04 0803 	add.w	r8, r4, r3
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80018dc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80018e0:	930a      	str	r3, [sp, #40]	; 0x28
 80018e2:	f898 3000 	ldrb.w	r3, [r8]
 80018e6:	2b2f      	cmp	r3, #47	; 0x2f
 80018e8:	d10b      	bne.n	8001902 <_tzset_unlocked_r+0x20a>
 80018ea:	9603      	str	r6, [sp, #12]
 80018ec:	f8cd a008 	str.w	sl, [sp, #8]
 80018f0:	9601      	str	r6, [sp, #4]
 80018f2:	f8cd b000 	str.w	fp, [sp]
 80018f6:	4633      	mov	r3, r6
 80018f8:	aa07      	add	r2, sp, #28
 80018fa:	493e      	ldr	r1, [pc, #248]	; (80019f4 <_tzset_unlocked_r+0x2fc>)
 80018fc:	4640      	mov	r0, r8
 80018fe:	f000 f963 	bl	8001bc8 <siscanf>
 8001902:	213c      	movs	r1, #60	; 0x3c
 8001904:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8001908:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800190c:	f109 0901 	add.w	r9, r9, #1
 8001910:	fb01 2203 	mla	r2, r1, r3, r2
 8001914:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001918:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800191c:	f1b9 0f02 	cmp.w	r9, #2
 8001920:	fb01 2303 	mla	r3, r1, r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001928:	f107 071c 	add.w	r7, r7, #28
 800192c:	4444      	add	r4, r8
 800192e:	d19c      	bne.n	800186a <_tzset_unlocked_r+0x172>
 8001930:	6868      	ldr	r0, [r5, #4]
 8001932:	f7ff fe31 	bl	8001598 <__tzcalc_limits>
 8001936:	6a2a      	ldr	r2, [r5, #32]
 8001938:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <_tzset_unlocked_r+0x2dc>)
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	bf18      	it	ne
 8001942:	2301      	movne	r3, #1
 8001944:	4a25      	ldr	r2, [pc, #148]	; (80019dc <_tzset_unlocked_r+0x2e4>)
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	e6f0      	b.n	800172c <_tzset_unlocked_r+0x34>
 800194a:	2b2b      	cmp	r3, #43	; 0x2b
 800194c:	bf08      	it	eq
 800194e:	3401      	addeq	r4, #1
 8001950:	2701      	movs	r7, #1
 8001952:	e76b      	b.n	800182c <_tzset_unlocked_r+0x134>
 8001954:	213c      	movs	r1, #60	; 0x3c
 8001956:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800195a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800195e:	fb01 2203 	mla	r2, r1, r3, r2
 8001962:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001966:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800196a:	fb01 2303 	mla	r3, r1, r3, r2
 800196e:	435f      	muls	r7, r3
 8001970:	63ef      	str	r7, [r5, #60]	; 0x3c
 8001972:	e775      	b.n	8001860 <_tzset_unlocked_r+0x168>
 8001974:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8001978:	bf0a      	itet	eq
 800197a:	4643      	moveq	r3, r8
 800197c:	2344      	movne	r3, #68	; 0x44
 800197e:	3401      	addeq	r4, #1
 8001980:	220a      	movs	r2, #10
 8001982:	a90b      	add	r1, sp, #44	; 0x2c
 8001984:	4620      	mov	r0, r4
 8001986:	9305      	str	r3, [sp, #20]
 8001988:	f000 f9ec 	bl	8001d64 <strtoul>
 800198c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8001990:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8001994:	4544      	cmp	r4, r8
 8001996:	9b05      	ldr	r3, [sp, #20]
 8001998:	d114      	bne.n	80019c4 <_tzset_unlocked_r+0x2cc>
 800199a:	234d      	movs	r3, #77	; 0x4d
 800199c:	f1b9 0f00 	cmp.w	r9, #0
 80019a0:	d107      	bne.n	80019b2 <_tzset_unlocked_r+0x2ba>
 80019a2:	722b      	strb	r3, [r5, #8]
 80019a4:	2303      	movs	r3, #3
 80019a6:	60eb      	str	r3, [r5, #12]
 80019a8:	2302      	movs	r3, #2
 80019aa:	f8c5 9014 	str.w	r9, [r5, #20]
 80019ae:	612b      	str	r3, [r5, #16]
 80019b0:	e78e      	b.n	80018d0 <_tzset_unlocked_r+0x1d8>
 80019b2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 80019b6:	230b      	movs	r3, #11
 80019b8:	62ab      	str	r3, [r5, #40]	; 0x28
 80019ba:	2301      	movs	r3, #1
 80019bc:	62eb      	str	r3, [r5, #44]	; 0x2c
 80019be:	2300      	movs	r3, #0
 80019c0:	632b      	str	r3, [r5, #48]	; 0x30
 80019c2:	e785      	b.n	80018d0 <_tzset_unlocked_r+0x1d8>
 80019c4:	b280      	uxth	r0, r0
 80019c6:	723b      	strb	r3, [r7, #8]
 80019c8:	6178      	str	r0, [r7, #20]
 80019ca:	e781      	b.n	80018d0 <_tzset_unlocked_r+0x1d8>
 80019cc:	08002718 	.word	0x08002718
 80019d0:	20000358 	.word	0x20000358
 80019d4:	20000360 	.word	0x20000360
 80019d8:	0800271b 	.word	0x0800271b
 80019dc:	2000035c 	.word	0x2000035c
 80019e0:	20000000 	.word	0x20000000
 80019e4:	2000034b 	.word	0x2000034b
 80019e8:	0800271f 	.word	0x0800271f
 80019ec:	08002742 	.word	0x08002742
 80019f0:	0800272e 	.word	0x0800272e
 80019f4:	08002741 	.word	0x08002741
 80019f8:	20000340 	.word	0x20000340

080019fc <_findenv_r>:
 80019fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a00:	4606      	mov	r6, r0
 8001a02:	468a      	mov	sl, r1
 8001a04:	4617      	mov	r7, r2
 8001a06:	f000 f9c3 	bl	8001d90 <__env_lock>
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <_findenv_r+0x7c>)
 8001a0c:	f8d3 8000 	ldr.w	r8, [r3]
 8001a10:	4699      	mov	r9, r3
 8001a12:	f1b8 0f00 	cmp.w	r8, #0
 8001a16:	d007      	beq.n	8001a28 <_findenv_r+0x2c>
 8001a18:	4654      	mov	r4, sl
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a20:	b332      	cbz	r2, 8001a70 <_findenv_r+0x74>
 8001a22:	2a3d      	cmp	r2, #61	; 0x3d
 8001a24:	461c      	mov	r4, r3
 8001a26:	d1f8      	bne.n	8001a1a <_findenv_r+0x1e>
 8001a28:	4630      	mov	r0, r6
 8001a2a:	f000 f9b2 	bl	8001d92 <__env_unlock>
 8001a2e:	2000      	movs	r0, #0
 8001a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a34:	f108 0804 	add.w	r8, r8, #4
 8001a38:	f8d8 0000 	ldr.w	r0, [r8]
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d0f3      	beq.n	8001a28 <_findenv_r+0x2c>
 8001a40:	4622      	mov	r2, r4
 8001a42:	4651      	mov	r1, sl
 8001a44:	f000 f8ec 	bl	8001c20 <strncmp>
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	d1f3      	bne.n	8001a34 <_findenv_r+0x38>
 8001a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8001a50:	191d      	adds	r5, r3, r4
 8001a52:	5d1b      	ldrb	r3, [r3, r4]
 8001a54:	2b3d      	cmp	r3, #61	; 0x3d
 8001a56:	d1ed      	bne.n	8001a34 <_findenv_r+0x38>
 8001a58:	f8d9 3000 	ldr.w	r3, [r9]
 8001a5c:	4630      	mov	r0, r6
 8001a5e:	eba8 0303 	sub.w	r3, r8, r3
 8001a62:	109b      	asrs	r3, r3, #2
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	f000 f994 	bl	8001d92 <__env_unlock>
 8001a6a:	1c68      	adds	r0, r5, #1
 8001a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a70:	eba4 040a 	sub.w	r4, r4, sl
 8001a74:	e7e0      	b.n	8001a38 <_findenv_r+0x3c>
 8001a76:	bf00      	nop
 8001a78:	200000ac 	.word	0x200000ac

08001a7c <_getenv_r>:
 8001a7c:	b507      	push	{r0, r1, r2, lr}
 8001a7e:	aa01      	add	r2, sp, #4
 8001a80:	f7ff ffbc 	bl	80019fc <_findenv_r>
 8001a84:	b003      	add	sp, #12
 8001a86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001a8c <__gettzinfo>:
 8001a8c:	4800      	ldr	r0, [pc, #0]	; (8001a90 <__gettzinfo+0x4>)
 8001a8e:	4770      	bx	lr
 8001a90:	20000008 	.word	0x20000008

08001a94 <gmtime_r>:
 8001a94:	6802      	ldr	r2, [r0, #0]
 8001a96:	4847      	ldr	r0, [pc, #284]	; (8001bb4 <gmtime_r+0x120>)
 8001a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9a:	fb92 f3f0 	sdiv	r3, r2, r0
 8001a9e:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8001aa2:	fb00 2013 	mls	r0, r0, r3, r2
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	bfbc      	itt	lt
 8001aaa:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
 8001aae:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
 8001ab2:	fb90 f2f4 	sdiv	r2, r0, r4
 8001ab6:	fb04 0012 	mls	r0, r4, r2, r0
 8001aba:	f04f 043c 	mov.w	r4, #60	; 0x3c
 8001abe:	608a      	str	r2, [r1, #8]
 8001ac0:	fb90 f2f4 	sdiv	r2, r0, r4
 8001ac4:	fb04 0012 	mls	r0, r4, r2, r0
 8001ac8:	604a      	str	r2, [r1, #4]
 8001aca:	f04f 0207 	mov.w	r2, #7
 8001ace:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8001ad2:	bfac      	ite	ge
 8001ad4:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 8001ad8:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 8001adc:	6008      	str	r0, [r1, #0]
 8001ade:	1cd8      	adds	r0, r3, #3
 8001ae0:	fb90 f2f2 	sdiv	r2, r0, r2
 8001ae4:	4c34      	ldr	r4, [pc, #208]	; (8001bb8 <gmtime_r+0x124>)
 8001ae6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8001aea:	fb93 f4f4 	sdiv	r4, r3, r4
 8001aee:	1a82      	subs	r2, r0, r2
 8001af0:	f648 60ac 	movw	r0, #36524	; 0x8eac
 8001af4:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8001af8:	618a      	str	r2, [r1, #24]
 8001afa:	4a30      	ldr	r2, [pc, #192]	; (8001bbc <gmtime_r+0x128>)
 8001afc:	f240 166d 	movw	r6, #365	; 0x16d
 8001b00:	fb02 3304 	mla	r3, r2, r4, r3
 8001b04:	fbb3 f0f0 	udiv	r0, r3, r0
 8001b08:	fbb3 f2f7 	udiv	r2, r3, r7
 8001b0c:	4418      	add	r0, r3
 8001b0e:	1a80      	subs	r0, r0, r2
 8001b10:	4a2b      	ldr	r2, [pc, #172]	; (8001bc0 <gmtime_r+0x12c>)
 8001b12:	fbb3 f2f2 	udiv	r2, r3, r2
 8001b16:	1a82      	subs	r2, r0, r2
 8001b18:	f648 6094 	movw	r0, #36500	; 0x8e94
 8001b1c:	fbb2 f0f0 	udiv	r0, r2, r0
 8001b20:	fbb2 f5f6 	udiv	r5, r2, r6
 8001b24:	fbb2 f2f7 	udiv	r2, r2, r7
 8001b28:	4403      	add	r3, r0
 8001b2a:	2099      	movs	r0, #153	; 0x99
 8001b2c:	1a9a      	subs	r2, r3, r2
 8001b2e:	fb06 2315 	mls	r3, r6, r5, r2
 8001b32:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001b36:	3202      	adds	r2, #2
 8001b38:	fbb2 f2f0 	udiv	r2, r2, r0
 8001b3c:	2705      	movs	r7, #5
 8001b3e:	4350      	muls	r0, r2
 8001b40:	3002      	adds	r0, #2
 8001b42:	fbb0 f0f7 	udiv	r0, r0, r7
 8001b46:	2a0a      	cmp	r2, #10
 8001b48:	f103 0601 	add.w	r6, r3, #1
 8001b4c:	eba6 0000 	sub.w	r0, r6, r0
 8001b50:	bf34      	ite	cc
 8001b52:	2602      	movcc	r6, #2
 8001b54:	f06f 0609 	mvncs.w	r6, #9
 8001b58:	4416      	add	r6, r2
 8001b5a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001b5e:	fb02 5404 	mla	r4, r2, r4, r5
 8001b62:	2e01      	cmp	r6, #1
 8001b64:	bf98      	it	ls
 8001b66:	3401      	addls	r4, #1
 8001b68:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001b6c:	d30b      	bcc.n	8001b86 <gmtime_r+0xf2>
 8001b6e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8001b72:	61cb      	str	r3, [r1, #28]
 8001b74:	2300      	movs	r3, #0
 8001b76:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
 8001b7a:	60c8      	str	r0, [r1, #12]
 8001b7c:	614c      	str	r4, [r1, #20]
 8001b7e:	610e      	str	r6, [r1, #16]
 8001b80:	620b      	str	r3, [r1, #32]
 8001b82:	4608      	mov	r0, r1
 8001b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b86:	07aa      	lsls	r2, r5, #30
 8001b88:	d105      	bne.n	8001b96 <gmtime_r+0x102>
 8001b8a:	2764      	movs	r7, #100	; 0x64
 8001b8c:	fbb5 f2f7 	udiv	r2, r5, r7
 8001b90:	fb07 5212 	mls	r2, r7, r2, r5
 8001b94:	b95a      	cbnz	r2, 8001bae <gmtime_r+0x11a>
 8001b96:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8001b9a:	fbb5 f2f7 	udiv	r2, r5, r7
 8001b9e:	fb07 5212 	mls	r2, r7, r2, r5
 8001ba2:	fab2 f282 	clz	r2, r2
 8001ba6:	0952      	lsrs	r2, r2, #5
 8001ba8:	333b      	adds	r3, #59	; 0x3b
 8001baa:	4413      	add	r3, r2
 8001bac:	e7e1      	b.n	8001b72 <gmtime_r+0xde>
 8001bae:	2201      	movs	r2, #1
 8001bb0:	e7fa      	b.n	8001ba8 <gmtime_r+0x114>
 8001bb2:	bf00      	nop
 8001bb4:	00015180 	.word	0x00015180
 8001bb8:	00023ab1 	.word	0x00023ab1
 8001bbc:	fffdc54f 	.word	0xfffdc54f
 8001bc0:	00023ab0 	.word	0x00023ab0

08001bc4 <__malloc_lock>:
 8001bc4:	4770      	bx	lr

08001bc6 <__malloc_unlock>:
 8001bc6:	4770      	bx	lr

08001bc8 <siscanf>:
 8001bc8:	b40e      	push	{r1, r2, r3}
 8001bca:	f44f 7201 	mov.w	r2, #516	; 0x204
 8001bce:	b530      	push	{r4, r5, lr}
 8001bd0:	b09c      	sub	sp, #112	; 0x70
 8001bd2:	ac1f      	add	r4, sp, #124	; 0x7c
 8001bd4:	f854 5b04 	ldr.w	r5, [r4], #4
 8001bd8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8001bdc:	9002      	str	r0, [sp, #8]
 8001bde:	9006      	str	r0, [sp, #24]
 8001be0:	f7fe fb20 	bl	8000224 <strlen>
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <siscanf+0x4c>)
 8001be6:	9003      	str	r0, [sp, #12]
 8001be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8001bea:	2300      	movs	r3, #0
 8001bec:	930f      	str	r3, [sp, #60]	; 0x3c
 8001bee:	9314      	str	r3, [sp, #80]	; 0x50
 8001bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf4:	9007      	str	r0, [sp, #28]
 8001bf6:	4808      	ldr	r0, [pc, #32]	; (8001c18 <siscanf+0x50>)
 8001bf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001bfc:	462a      	mov	r2, r5
 8001bfe:	4623      	mov	r3, r4
 8001c00:	a902      	add	r1, sp, #8
 8001c02:	6800      	ldr	r0, [r0, #0]
 8001c04:	9401      	str	r4, [sp, #4]
 8001c06:	f000 f943 	bl	8001e90 <__ssvfiscanf_r>
 8001c0a:	b01c      	add	sp, #112	; 0x70
 8001c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001c10:	b003      	add	sp, #12
 8001c12:	4770      	bx	lr
 8001c14:	08001c1d 	.word	0x08001c1d
 8001c18:	20000048 	.word	0x20000048

08001c1c <__seofread>:
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	4770      	bx	lr

08001c20 <strncmp>:
 8001c20:	b510      	push	{r4, lr}
 8001c22:	b16a      	cbz	r2, 8001c40 <strncmp+0x20>
 8001c24:	3901      	subs	r1, #1
 8001c26:	1884      	adds	r4, r0, r2
 8001c28:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001c2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d103      	bne.n	8001c3c <strncmp+0x1c>
 8001c34:	42a0      	cmp	r0, r4
 8001c36:	d001      	beq.n	8001c3c <strncmp+0x1c>
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f5      	bne.n	8001c28 <strncmp+0x8>
 8001c3c:	1a98      	subs	r0, r3, r2
 8001c3e:	bd10      	pop	{r4, pc}
 8001c40:	4610      	mov	r0, r2
 8001c42:	bd10      	pop	{r4, pc}

08001c44 <_strtoul_l.isra.0>:
 8001c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c48:	4680      	mov	r8, r0
 8001c4a:	4689      	mov	r9, r1
 8001c4c:	4692      	mov	sl, r2
 8001c4e:	461e      	mov	r6, r3
 8001c50:	460f      	mov	r7, r1
 8001c52:	463d      	mov	r5, r7
 8001c54:	9808      	ldr	r0, [sp, #32]
 8001c56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001c5a:	f000 f89b 	bl	8001d94 <__locale_ctype_ptr_l>
 8001c5e:	4420      	add	r0, r4
 8001c60:	7843      	ldrb	r3, [r0, #1]
 8001c62:	f013 0308 	ands.w	r3, r3, #8
 8001c66:	d10a      	bne.n	8001c7e <_strtoul_l.isra.0+0x3a>
 8001c68:	2c2d      	cmp	r4, #45	; 0x2d
 8001c6a:	d10a      	bne.n	8001c82 <_strtoul_l.isra.0+0x3e>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	782c      	ldrb	r4, [r5, #0]
 8001c70:	1cbd      	adds	r5, r7, #2
 8001c72:	b15e      	cbz	r6, 8001c8c <_strtoul_l.isra.0+0x48>
 8001c74:	2e10      	cmp	r6, #16
 8001c76:	d113      	bne.n	8001ca0 <_strtoul_l.isra.0+0x5c>
 8001c78:	2c30      	cmp	r4, #48	; 0x30
 8001c7a:	d009      	beq.n	8001c90 <_strtoul_l.isra.0+0x4c>
 8001c7c:	e010      	b.n	8001ca0 <_strtoul_l.isra.0+0x5c>
 8001c7e:	462f      	mov	r7, r5
 8001c80:	e7e7      	b.n	8001c52 <_strtoul_l.isra.0+0xe>
 8001c82:	2c2b      	cmp	r4, #43	; 0x2b
 8001c84:	bf04      	itt	eq
 8001c86:	782c      	ldrbeq	r4, [r5, #0]
 8001c88:	1cbd      	addeq	r5, r7, #2
 8001c8a:	e7f2      	b.n	8001c72 <_strtoul_l.isra.0+0x2e>
 8001c8c:	2c30      	cmp	r4, #48	; 0x30
 8001c8e:	d125      	bne.n	8001cdc <_strtoul_l.isra.0+0x98>
 8001c90:	782a      	ldrb	r2, [r5, #0]
 8001c92:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8001c96:	2a58      	cmp	r2, #88	; 0x58
 8001c98:	d14a      	bne.n	8001d30 <_strtoul_l.isra.0+0xec>
 8001c9a:	2610      	movs	r6, #16
 8001c9c:	786c      	ldrb	r4, [r5, #1]
 8001c9e:	3502      	adds	r5, #2
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ca4:	fbb1 f1f6 	udiv	r1, r1, r6
 8001ca8:	2700      	movs	r7, #0
 8001caa:	fb06 fe01 	mul.w	lr, r6, r1
 8001cae:	4638      	mov	r0, r7
 8001cb0:	ea6f 0e0e 	mvn.w	lr, lr
 8001cb4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8001cb8:	2a09      	cmp	r2, #9
 8001cba:	d811      	bhi.n	8001ce0 <_strtoul_l.isra.0+0x9c>
 8001cbc:	4614      	mov	r4, r2
 8001cbe:	42a6      	cmp	r6, r4
 8001cc0:	dd1d      	ble.n	8001cfe <_strtoul_l.isra.0+0xba>
 8001cc2:	2f00      	cmp	r7, #0
 8001cc4:	db18      	blt.n	8001cf8 <_strtoul_l.isra.0+0xb4>
 8001cc6:	4281      	cmp	r1, r0
 8001cc8:	d316      	bcc.n	8001cf8 <_strtoul_l.isra.0+0xb4>
 8001cca:	d101      	bne.n	8001cd0 <_strtoul_l.isra.0+0x8c>
 8001ccc:	45a6      	cmp	lr, r4
 8001cce:	db13      	blt.n	8001cf8 <_strtoul_l.isra.0+0xb4>
 8001cd0:	2701      	movs	r7, #1
 8001cd2:	fb00 4006 	mla	r0, r0, r6, r4
 8001cd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001cda:	e7eb      	b.n	8001cb4 <_strtoul_l.isra.0+0x70>
 8001cdc:	260a      	movs	r6, #10
 8001cde:	e7df      	b.n	8001ca0 <_strtoul_l.isra.0+0x5c>
 8001ce0:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8001ce4:	2a19      	cmp	r2, #25
 8001ce6:	d801      	bhi.n	8001cec <_strtoul_l.isra.0+0xa8>
 8001ce8:	3c37      	subs	r4, #55	; 0x37
 8001cea:	e7e8      	b.n	8001cbe <_strtoul_l.isra.0+0x7a>
 8001cec:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8001cf0:	2a19      	cmp	r2, #25
 8001cf2:	d804      	bhi.n	8001cfe <_strtoul_l.isra.0+0xba>
 8001cf4:	3c57      	subs	r4, #87	; 0x57
 8001cf6:	e7e2      	b.n	8001cbe <_strtoul_l.isra.0+0x7a>
 8001cf8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001cfc:	e7eb      	b.n	8001cd6 <_strtoul_l.isra.0+0x92>
 8001cfe:	2f00      	cmp	r7, #0
 8001d00:	da09      	bge.n	8001d16 <_strtoul_l.isra.0+0xd2>
 8001d02:	2322      	movs	r3, #34	; 0x22
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d08:	f8c8 3000 	str.w	r3, [r8]
 8001d0c:	f1ba 0f00 	cmp.w	sl, #0
 8001d10:	d107      	bne.n	8001d22 <_strtoul_l.isra.0+0xde>
 8001d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d16:	b103      	cbz	r3, 8001d1a <_strtoul_l.isra.0+0xd6>
 8001d18:	4240      	negs	r0, r0
 8001d1a:	f1ba 0f00 	cmp.w	sl, #0
 8001d1e:	d00c      	beq.n	8001d3a <_strtoul_l.isra.0+0xf6>
 8001d20:	b127      	cbz	r7, 8001d2c <_strtoul_l.isra.0+0xe8>
 8001d22:	3d01      	subs	r5, #1
 8001d24:	f8ca 5000 	str.w	r5, [sl]
 8001d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d2c:	464d      	mov	r5, r9
 8001d2e:	e7f9      	b.n	8001d24 <_strtoul_l.isra.0+0xe0>
 8001d30:	2430      	movs	r4, #48	; 0x30
 8001d32:	2e00      	cmp	r6, #0
 8001d34:	d1b4      	bne.n	8001ca0 <_strtoul_l.isra.0+0x5c>
 8001d36:	2608      	movs	r6, #8
 8001d38:	e7b2      	b.n	8001ca0 <_strtoul_l.isra.0+0x5c>
 8001d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001d40 <_strtoul_r>:
 8001d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d42:	4c06      	ldr	r4, [pc, #24]	; (8001d5c <_strtoul_r+0x1c>)
 8001d44:	4d06      	ldr	r5, [pc, #24]	; (8001d60 <_strtoul_r+0x20>)
 8001d46:	6824      	ldr	r4, [r4, #0]
 8001d48:	6a24      	ldr	r4, [r4, #32]
 8001d4a:	2c00      	cmp	r4, #0
 8001d4c:	bf08      	it	eq
 8001d4e:	462c      	moveq	r4, r5
 8001d50:	9400      	str	r4, [sp, #0]
 8001d52:	f7ff ff77 	bl	8001c44 <_strtoul_l.isra.0>
 8001d56:	b003      	add	sp, #12
 8001d58:	bd30      	pop	{r4, r5, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000048 	.word	0x20000048
 8001d60:	200000b0 	.word	0x200000b0

08001d64 <strtoul>:
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <strtoul+0x24>)
 8001d66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d68:	681c      	ldr	r4, [r3, #0]
 8001d6a:	4d08      	ldr	r5, [pc, #32]	; (8001d8c <strtoul+0x28>)
 8001d6c:	6a23      	ldr	r3, [r4, #32]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bf08      	it	eq
 8001d72:	462b      	moveq	r3, r5
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	4613      	mov	r3, r2
 8001d78:	460a      	mov	r2, r1
 8001d7a:	4601      	mov	r1, r0
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f7ff ff61 	bl	8001c44 <_strtoul_l.isra.0>
 8001d82:	b003      	add	sp, #12
 8001d84:	bd30      	pop	{r4, r5, pc}
 8001d86:	bf00      	nop
 8001d88:	20000048 	.word	0x20000048
 8001d8c:	200000b0 	.word	0x200000b0

08001d90 <__env_lock>:
 8001d90:	4770      	bx	lr

08001d92 <__env_unlock>:
 8001d92:	4770      	bx	lr

08001d94 <__locale_ctype_ptr_l>:
 8001d94:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8001d98:	4770      	bx	lr
	...

08001d9c <__locale_ctype_ptr>:
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__locale_ctype_ptr+0x14>)
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <__locale_ctype_ptr+0x18>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf08      	it	eq
 8001da8:	4613      	moveq	r3, r2
 8001daa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8001dae:	4770      	bx	lr
 8001db0:	20000048 	.word	0x20000048
 8001db4:	200000b0 	.word	0x200000b0

08001db8 <__ascii_mbtowc>:
 8001db8:	b082      	sub	sp, #8
 8001dba:	b901      	cbnz	r1, 8001dbe <__ascii_mbtowc+0x6>
 8001dbc:	a901      	add	r1, sp, #4
 8001dbe:	b142      	cbz	r2, 8001dd2 <__ascii_mbtowc+0x1a>
 8001dc0:	b14b      	cbz	r3, 8001dd6 <__ascii_mbtowc+0x1e>
 8001dc2:	7813      	ldrb	r3, [r2, #0]
 8001dc4:	600b      	str	r3, [r1, #0]
 8001dc6:	7812      	ldrb	r2, [r2, #0]
 8001dc8:	1c10      	adds	r0, r2, #0
 8001dca:	bf18      	it	ne
 8001dcc:	2001      	movne	r0, #1
 8001dce:	b002      	add	sp, #8
 8001dd0:	4770      	bx	lr
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	e7fb      	b.n	8001dce <__ascii_mbtowc+0x16>
 8001dd6:	f06f 0001 	mvn.w	r0, #1
 8001dda:	e7f8      	b.n	8001dce <__ascii_mbtowc+0x16>

08001ddc <_sungetc_r>:
 8001ddc:	b538      	push	{r3, r4, r5, lr}
 8001dde:	1c4b      	adds	r3, r1, #1
 8001de0:	4614      	mov	r4, r2
 8001de2:	d103      	bne.n	8001dec <_sungetc_r+0x10>
 8001de4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001de8:	4628      	mov	r0, r5
 8001dea:	bd38      	pop	{r3, r4, r5, pc}
 8001dec:	8993      	ldrh	r3, [r2, #12]
 8001dee:	b2cd      	uxtb	r5, r1
 8001df0:	f023 0320 	bic.w	r3, r3, #32
 8001df4:	8193      	strh	r3, [r2, #12]
 8001df6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001df8:	6852      	ldr	r2, [r2, #4]
 8001dfa:	b18b      	cbz	r3, 8001e20 <_sungetc_r+0x44>
 8001dfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	da08      	bge.n	8001e14 <_sungetc_r+0x38>
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	1e5a      	subs	r2, r3, #1
 8001e06:	6022      	str	r2, [r4, #0]
 8001e08:	f803 5c01 	strb.w	r5, [r3, #-1]
 8001e0c:	6863      	ldr	r3, [r4, #4]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	6063      	str	r3, [r4, #4]
 8001e12:	e7e9      	b.n	8001de8 <_sungetc_r+0xc>
 8001e14:	4621      	mov	r1, r4
 8001e16:	f000 fbab 	bl	8002570 <__submore>
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	d0f1      	beq.n	8001e02 <_sungetc_r+0x26>
 8001e1e:	e7e1      	b.n	8001de4 <_sungetc_r+0x8>
 8001e20:	6921      	ldr	r1, [r4, #16]
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	b151      	cbz	r1, 8001e3c <_sungetc_r+0x60>
 8001e26:	4299      	cmp	r1, r3
 8001e28:	d208      	bcs.n	8001e3c <_sungetc_r+0x60>
 8001e2a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8001e2e:	428d      	cmp	r5, r1
 8001e30:	d104      	bne.n	8001e3c <_sungetc_r+0x60>
 8001e32:	3b01      	subs	r3, #1
 8001e34:	3201      	adds	r2, #1
 8001e36:	6023      	str	r3, [r4, #0]
 8001e38:	6062      	str	r2, [r4, #4]
 8001e3a:	e7d5      	b.n	8001de8 <_sungetc_r+0xc>
 8001e3c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e42:	6363      	str	r3, [r4, #52]	; 0x34
 8001e44:	2303      	movs	r3, #3
 8001e46:	63a3      	str	r3, [r4, #56]	; 0x38
 8001e48:	4623      	mov	r3, r4
 8001e4a:	6422      	str	r2, [r4, #64]	; 0x40
 8001e4c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8001e50:	6023      	str	r3, [r4, #0]
 8001e52:	2301      	movs	r3, #1
 8001e54:	e7dc      	b.n	8001e10 <_sungetc_r+0x34>

08001e56 <__ssrefill_r>:
 8001e56:	b510      	push	{r4, lr}
 8001e58:	460c      	mov	r4, r1
 8001e5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8001e5c:	b169      	cbz	r1, 8001e7a <__ssrefill_r+0x24>
 8001e5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e62:	4299      	cmp	r1, r3
 8001e64:	d001      	beq.n	8001e6a <__ssrefill_r+0x14>
 8001e66:	f7ff fad5 	bl	8001414 <_free_r>
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e6e:	6360      	str	r0, [r4, #52]	; 0x34
 8001e70:	6063      	str	r3, [r4, #4]
 8001e72:	b113      	cbz	r3, 8001e7a <__ssrefill_r+0x24>
 8001e74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e76:	6023      	str	r3, [r4, #0]
 8001e78:	bd10      	pop	{r4, pc}
 8001e7a:	6923      	ldr	r3, [r4, #16]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e80:	6023      	str	r3, [r4, #0]
 8001e82:	2300      	movs	r3, #0
 8001e84:	6063      	str	r3, [r4, #4]
 8001e86:	89a3      	ldrh	r3, [r4, #12]
 8001e88:	f043 0320 	orr.w	r3, r3, #32
 8001e8c:	81a3      	strh	r3, [r4, #12]
 8001e8e:	bd10      	pop	{r4, pc}

08001e90 <__ssvfiscanf_r>:
 8001e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e94:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	4606      	mov	r6, r0
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	4692      	mov	sl, r2
 8001ea2:	270a      	movs	r7, #10
 8001ea4:	9346      	str	r3, [sp, #280]	; 0x118
 8001ea6:	9347      	str	r3, [sp, #284]	; 0x11c
 8001ea8:	4b9f      	ldr	r3, [pc, #636]	; (8002128 <__ssvfiscanf_r+0x298>)
 8001eaa:	f10d 080c 	add.w	r8, sp, #12
 8001eae:	93a2      	str	r3, [sp, #648]	; 0x288
 8001eb0:	4b9e      	ldr	r3, [pc, #632]	; (800212c <__ssvfiscanf_r+0x29c>)
 8001eb2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8002130 <__ssvfiscanf_r+0x2a0>
 8001eb6:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8001eba:	93a3      	str	r3, [sp, #652]	; 0x28c
 8001ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 812f 	beq.w	8002124 <__ssvfiscanf_r+0x294>
 8001ec6:	f7ff ff69 	bl	8001d9c <__locale_ctype_ptr>
 8001eca:	f89a b000 	ldrb.w	fp, [sl]
 8001ece:	4458      	add	r0, fp
 8001ed0:	7843      	ldrb	r3, [r0, #1]
 8001ed2:	f013 0308 	ands.w	r3, r3, #8
 8001ed6:	d143      	bne.n	8001f60 <__ssvfiscanf_r+0xd0>
 8001ed8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8001edc:	f10a 0501 	add.w	r5, sl, #1
 8001ee0:	f040 8099 	bne.w	8002016 <__ssvfiscanf_r+0x186>
 8001ee4:	9345      	str	r3, [sp, #276]	; 0x114
 8001ee6:	9343      	str	r3, [sp, #268]	; 0x10c
 8001ee8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8001eec:	2b2a      	cmp	r3, #42	; 0x2a
 8001eee:	d103      	bne.n	8001ef8 <__ssvfiscanf_r+0x68>
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	f10a 0502 	add.w	r5, sl, #2
 8001ef6:	9343      	str	r3, [sp, #268]	; 0x10c
 8001ef8:	7829      	ldrb	r1, [r5, #0]
 8001efa:	46aa      	mov	sl, r5
 8001efc:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001f00:	2a09      	cmp	r2, #9
 8001f02:	f105 0501 	add.w	r5, r5, #1
 8001f06:	d941      	bls.n	8001f8c <__ssvfiscanf_r+0xfc>
 8001f08:	2203      	movs	r2, #3
 8001f0a:	4889      	ldr	r0, [pc, #548]	; (8002130 <__ssvfiscanf_r+0x2a0>)
 8001f0c:	f000 fb76 	bl	80025fc <memchr>
 8001f10:	b138      	cbz	r0, 8001f22 <__ssvfiscanf_r+0x92>
 8001f12:	eba0 0309 	sub.w	r3, r0, r9
 8001f16:	2001      	movs	r0, #1
 8001f18:	46aa      	mov	sl, r5
 8001f1a:	4098      	lsls	r0, r3
 8001f1c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001f1e:	4318      	orrs	r0, r3
 8001f20:	9043      	str	r0, [sp, #268]	; 0x10c
 8001f22:	f89a 3000 	ldrb.w	r3, [sl]
 8001f26:	f10a 0501 	add.w	r5, sl, #1
 8001f2a:	2b67      	cmp	r3, #103	; 0x67
 8001f2c:	d84a      	bhi.n	8001fc4 <__ssvfiscanf_r+0x134>
 8001f2e:	2b65      	cmp	r3, #101	; 0x65
 8001f30:	f080 80b7 	bcs.w	80020a2 <__ssvfiscanf_r+0x212>
 8001f34:	2b47      	cmp	r3, #71	; 0x47
 8001f36:	d82f      	bhi.n	8001f98 <__ssvfiscanf_r+0x108>
 8001f38:	2b45      	cmp	r3, #69	; 0x45
 8001f3a:	f080 80b2 	bcs.w	80020a2 <__ssvfiscanf_r+0x212>
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8082 	beq.w	8002048 <__ssvfiscanf_r+0x1b8>
 8001f44:	2b25      	cmp	r3, #37	; 0x25
 8001f46:	d066      	beq.n	8002016 <__ssvfiscanf_r+0x186>
 8001f48:	2303      	movs	r3, #3
 8001f4a:	9744      	str	r7, [sp, #272]	; 0x110
 8001f4c:	9349      	str	r3, [sp, #292]	; 0x124
 8001f4e:	e045      	b.n	8001fdc <__ssvfiscanf_r+0x14c>
 8001f50:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8001f52:	3301      	adds	r3, #1
 8001f54:	3101      	adds	r1, #1
 8001f56:	9147      	str	r1, [sp, #284]	; 0x11c
 8001f58:	6861      	ldr	r1, [r4, #4]
 8001f5a:	6023      	str	r3, [r4, #0]
 8001f5c:	3901      	subs	r1, #1
 8001f5e:	6061      	str	r1, [r4, #4]
 8001f60:	6863      	ldr	r3, [r4, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	dd0b      	ble.n	8001f7e <__ssvfiscanf_r+0xee>
 8001f66:	f7ff ff19 	bl	8001d9c <__locale_ctype_ptr>
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	7819      	ldrb	r1, [r3, #0]
 8001f6e:	4408      	add	r0, r1
 8001f70:	7841      	ldrb	r1, [r0, #1]
 8001f72:	070d      	lsls	r5, r1, #28
 8001f74:	d4ec      	bmi.n	8001f50 <__ssvfiscanf_r+0xc0>
 8001f76:	f10a 0501 	add.w	r5, sl, #1
 8001f7a:	46aa      	mov	sl, r5
 8001f7c:	e79e      	b.n	8001ebc <__ssvfiscanf_r+0x2c>
 8001f7e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8001f80:	4621      	mov	r1, r4
 8001f82:	4630      	mov	r0, r6
 8001f84:	4798      	blx	r3
 8001f86:	2800      	cmp	r0, #0
 8001f88:	d0ed      	beq.n	8001f66 <__ssvfiscanf_r+0xd6>
 8001f8a:	e7f4      	b.n	8001f76 <__ssvfiscanf_r+0xe6>
 8001f8c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8001f8e:	fb07 1303 	mla	r3, r7, r3, r1
 8001f92:	3b30      	subs	r3, #48	; 0x30
 8001f94:	9345      	str	r3, [sp, #276]	; 0x114
 8001f96:	e7af      	b.n	8001ef8 <__ssvfiscanf_r+0x68>
 8001f98:	2b5b      	cmp	r3, #91	; 0x5b
 8001f9a:	d061      	beq.n	8002060 <__ssvfiscanf_r+0x1d0>
 8001f9c:	d80c      	bhi.n	8001fb8 <__ssvfiscanf_r+0x128>
 8001f9e:	2b58      	cmp	r3, #88	; 0x58
 8001fa0:	d1d2      	bne.n	8001f48 <__ssvfiscanf_r+0xb8>
 8001fa2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8001fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa8:	9243      	str	r2, [sp, #268]	; 0x10c
 8001faa:	2210      	movs	r2, #16
 8001fac:	9244      	str	r2, [sp, #272]	; 0x110
 8001fae:	2b6f      	cmp	r3, #111	; 0x6f
 8001fb0:	bfb4      	ite	lt
 8001fb2:	2303      	movlt	r3, #3
 8001fb4:	2304      	movge	r3, #4
 8001fb6:	e010      	b.n	8001fda <__ssvfiscanf_r+0x14a>
 8001fb8:	2b63      	cmp	r3, #99	; 0x63
 8001fba:	d05c      	beq.n	8002076 <__ssvfiscanf_r+0x1e6>
 8001fbc:	2b64      	cmp	r3, #100	; 0x64
 8001fbe:	d1c3      	bne.n	8001f48 <__ssvfiscanf_r+0xb8>
 8001fc0:	9744      	str	r7, [sp, #272]	; 0x110
 8001fc2:	e7f4      	b.n	8001fae <__ssvfiscanf_r+0x11e>
 8001fc4:	2b70      	cmp	r3, #112	; 0x70
 8001fc6:	d042      	beq.n	800204e <__ssvfiscanf_r+0x1be>
 8001fc8:	d81d      	bhi.n	8002006 <__ssvfiscanf_r+0x176>
 8001fca:	2b6e      	cmp	r3, #110	; 0x6e
 8001fcc:	d059      	beq.n	8002082 <__ssvfiscanf_r+0x1f2>
 8001fce:	d843      	bhi.n	8002058 <__ssvfiscanf_r+0x1c8>
 8001fd0:	2b69      	cmp	r3, #105	; 0x69
 8001fd2:	d1b9      	bne.n	8001f48 <__ssvfiscanf_r+0xb8>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9344      	str	r3, [sp, #272]	; 0x110
 8001fd8:	2303      	movs	r3, #3
 8001fda:	9349      	str	r3, [sp, #292]	; 0x124
 8001fdc:	6863      	ldr	r3, [r4, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	dd61      	ble.n	80020a6 <__ssvfiscanf_r+0x216>
 8001fe2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001fe4:	0659      	lsls	r1, r3, #25
 8001fe6:	d56f      	bpl.n	80020c8 <__ssvfiscanf_r+0x238>
 8001fe8:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	dc7c      	bgt.n	80020e8 <__ssvfiscanf_r+0x258>
 8001fee:	ab01      	add	r3, sp, #4
 8001ff0:	4622      	mov	r2, r4
 8001ff2:	a943      	add	r1, sp, #268	; 0x10c
 8001ff4:	4630      	mov	r0, r6
 8001ff6:	f000 f89f 	bl	8002138 <_scanf_chars>
 8001ffa:	2801      	cmp	r0, #1
 8001ffc:	f000 8092 	beq.w	8002124 <__ssvfiscanf_r+0x294>
 8002000:	2802      	cmp	r0, #2
 8002002:	d1ba      	bne.n	8001f7a <__ssvfiscanf_r+0xea>
 8002004:	e01d      	b.n	8002042 <__ssvfiscanf_r+0x1b2>
 8002006:	2b75      	cmp	r3, #117	; 0x75
 8002008:	d0da      	beq.n	8001fc0 <__ssvfiscanf_r+0x130>
 800200a:	2b78      	cmp	r3, #120	; 0x78
 800200c:	d0c9      	beq.n	8001fa2 <__ssvfiscanf_r+0x112>
 800200e:	2b73      	cmp	r3, #115	; 0x73
 8002010:	d19a      	bne.n	8001f48 <__ssvfiscanf_r+0xb8>
 8002012:	2302      	movs	r3, #2
 8002014:	e7e1      	b.n	8001fda <__ssvfiscanf_r+0x14a>
 8002016:	6863      	ldr	r3, [r4, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	dd0c      	ble.n	8002036 <__ssvfiscanf_r+0x1a6>
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	781a      	ldrb	r2, [r3, #0]
 8002020:	4593      	cmp	fp, r2
 8002022:	d17f      	bne.n	8002124 <__ssvfiscanf_r+0x294>
 8002024:	3301      	adds	r3, #1
 8002026:	6862      	ldr	r2, [r4, #4]
 8002028:	6023      	str	r3, [r4, #0]
 800202a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800202c:	3a01      	subs	r2, #1
 800202e:	3301      	adds	r3, #1
 8002030:	6062      	str	r2, [r4, #4]
 8002032:	9347      	str	r3, [sp, #284]	; 0x11c
 8002034:	e7a1      	b.n	8001f7a <__ssvfiscanf_r+0xea>
 8002036:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8002038:	4621      	mov	r1, r4
 800203a:	4630      	mov	r0, r6
 800203c:	4798      	blx	r3
 800203e:	2800      	cmp	r0, #0
 8002040:	d0ec      	beq.n	800201c <__ssvfiscanf_r+0x18c>
 8002042:	9846      	ldr	r0, [sp, #280]	; 0x118
 8002044:	2800      	cmp	r0, #0
 8002046:	d163      	bne.n	8002110 <__ssvfiscanf_r+0x280>
 8002048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800204c:	e066      	b.n	800211c <__ssvfiscanf_r+0x28c>
 800204e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8002050:	f042 0220 	orr.w	r2, r2, #32
 8002054:	9243      	str	r2, [sp, #268]	; 0x10c
 8002056:	e7a4      	b.n	8001fa2 <__ssvfiscanf_r+0x112>
 8002058:	2308      	movs	r3, #8
 800205a:	9344      	str	r3, [sp, #272]	; 0x110
 800205c:	2304      	movs	r3, #4
 800205e:	e7bc      	b.n	8001fda <__ssvfiscanf_r+0x14a>
 8002060:	4629      	mov	r1, r5
 8002062:	4640      	mov	r0, r8
 8002064:	f000 f9c2 	bl	80023ec <__sccl>
 8002068:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800206a:	4605      	mov	r5, r0
 800206c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002070:	9343      	str	r3, [sp, #268]	; 0x10c
 8002072:	2301      	movs	r3, #1
 8002074:	e7b1      	b.n	8001fda <__ssvfiscanf_r+0x14a>
 8002076:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800207c:	9343      	str	r3, [sp, #268]	; 0x10c
 800207e:	2300      	movs	r3, #0
 8002080:	e7ab      	b.n	8001fda <__ssvfiscanf_r+0x14a>
 8002082:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8002084:	06d0      	lsls	r0, r2, #27
 8002086:	f53f af78 	bmi.w	8001f7a <__ssvfiscanf_r+0xea>
 800208a:	f012 0f01 	tst.w	r2, #1
 800208e:	9a01      	ldr	r2, [sp, #4]
 8002090:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002092:	f102 0104 	add.w	r1, r2, #4
 8002096:	9101      	str	r1, [sp, #4]
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	bf14      	ite	ne
 800209c:	8013      	strhne	r3, [r2, #0]
 800209e:	6013      	streq	r3, [r2, #0]
 80020a0:	e76b      	b.n	8001f7a <__ssvfiscanf_r+0xea>
 80020a2:	2305      	movs	r3, #5
 80020a4:	e799      	b.n	8001fda <__ssvfiscanf_r+0x14a>
 80020a6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80020a8:	4621      	mov	r1, r4
 80020aa:	4630      	mov	r0, r6
 80020ac:	4798      	blx	r3
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d097      	beq.n	8001fe2 <__ssvfiscanf_r+0x152>
 80020b2:	e7c6      	b.n	8002042 <__ssvfiscanf_r+0x1b2>
 80020b4:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80020b6:	3201      	adds	r2, #1
 80020b8:	9247      	str	r2, [sp, #284]	; 0x11c
 80020ba:	6862      	ldr	r2, [r4, #4]
 80020bc:	3a01      	subs	r2, #1
 80020be:	2a00      	cmp	r2, #0
 80020c0:	6062      	str	r2, [r4, #4]
 80020c2:	dd0a      	ble.n	80020da <__ssvfiscanf_r+0x24a>
 80020c4:	3301      	adds	r3, #1
 80020c6:	6023      	str	r3, [r4, #0]
 80020c8:	f7ff fe68 	bl	8001d9c <__locale_ctype_ptr>
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	781a      	ldrb	r2, [r3, #0]
 80020d0:	4410      	add	r0, r2
 80020d2:	7842      	ldrb	r2, [r0, #1]
 80020d4:	0712      	lsls	r2, r2, #28
 80020d6:	d4ed      	bmi.n	80020b4 <__ssvfiscanf_r+0x224>
 80020d8:	e786      	b.n	8001fe8 <__ssvfiscanf_r+0x158>
 80020da:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80020dc:	4621      	mov	r1, r4
 80020de:	4630      	mov	r0, r6
 80020e0:	4798      	blx	r3
 80020e2:	2800      	cmp	r0, #0
 80020e4:	d0f0      	beq.n	80020c8 <__ssvfiscanf_r+0x238>
 80020e6:	e7ac      	b.n	8002042 <__ssvfiscanf_r+0x1b2>
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	dc06      	bgt.n	80020fa <__ssvfiscanf_r+0x26a>
 80020ec:	ab01      	add	r3, sp, #4
 80020ee:	4622      	mov	r2, r4
 80020f0:	a943      	add	r1, sp, #268	; 0x10c
 80020f2:	4630      	mov	r0, r6
 80020f4:	f000 f884 	bl	8002200 <_scanf_i>
 80020f8:	e77f      	b.n	8001ffa <__ssvfiscanf_r+0x16a>
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <__ssvfiscanf_r+0x2a4>)
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f43f af3c 	beq.w	8001f7a <__ssvfiscanf_r+0xea>
 8002102:	ab01      	add	r3, sp, #4
 8002104:	4622      	mov	r2, r4
 8002106:	a943      	add	r1, sp, #268	; 0x10c
 8002108:	4630      	mov	r0, r6
 800210a:	f3af 8000 	nop.w
 800210e:	e774      	b.n	8001ffa <__ssvfiscanf_r+0x16a>
 8002110:	89a3      	ldrh	r3, [r4, #12]
 8002112:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002116:	bf18      	it	ne
 8002118:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800211c:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8002120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002124:	9846      	ldr	r0, [sp, #280]	; 0x118
 8002126:	e7f9      	b.n	800211c <__ssvfiscanf_r+0x28c>
 8002128:	08001ddd 	.word	0x08001ddd
 800212c:	08001e57 	.word	0x08001e57
 8002130:	0800275e 	.word	0x0800275e
 8002134:	00000000 	.word	0x00000000

08002138 <_scanf_chars>:
 8002138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800213c:	4615      	mov	r5, r2
 800213e:	688a      	ldr	r2, [r1, #8]
 8002140:	4680      	mov	r8, r0
 8002142:	460c      	mov	r4, r1
 8002144:	b932      	cbnz	r2, 8002154 <_scanf_chars+0x1c>
 8002146:	698a      	ldr	r2, [r1, #24]
 8002148:	2a00      	cmp	r2, #0
 800214a:	bf0c      	ite	eq
 800214c:	2201      	moveq	r2, #1
 800214e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8002152:	608a      	str	r2, [r1, #8]
 8002154:	2600      	movs	r6, #0
 8002156:	6822      	ldr	r2, [r4, #0]
 8002158:	06d1      	lsls	r1, r2, #27
 800215a:	bf5f      	itttt	pl
 800215c:	681a      	ldrpl	r2, [r3, #0]
 800215e:	1d11      	addpl	r1, r2, #4
 8002160:	6019      	strpl	r1, [r3, #0]
 8002162:	6817      	ldrpl	r7, [r2, #0]
 8002164:	69a3      	ldr	r3, [r4, #24]
 8002166:	b1db      	cbz	r3, 80021a0 <_scanf_chars+0x68>
 8002168:	2b01      	cmp	r3, #1
 800216a:	d107      	bne.n	800217c <_scanf_chars+0x44>
 800216c:	682b      	ldr	r3, [r5, #0]
 800216e:	6962      	ldr	r2, [r4, #20]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	b9a3      	cbnz	r3, 80021a0 <_scanf_chars+0x68>
 8002176:	2e00      	cmp	r6, #0
 8002178:	d131      	bne.n	80021de <_scanf_chars+0xa6>
 800217a:	e006      	b.n	800218a <_scanf_chars+0x52>
 800217c:	2b02      	cmp	r3, #2
 800217e:	d007      	beq.n	8002190 <_scanf_chars+0x58>
 8002180:	2e00      	cmp	r6, #0
 8002182:	d12c      	bne.n	80021de <_scanf_chars+0xa6>
 8002184:	69a3      	ldr	r3, [r4, #24]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d129      	bne.n	80021de <_scanf_chars+0xa6>
 800218a:	2001      	movs	r0, #1
 800218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002190:	f7ff fe04 	bl	8001d9c <__locale_ctype_ptr>
 8002194:	682b      	ldr	r3, [r5, #0]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4418      	add	r0, r3
 800219a:	7843      	ldrb	r3, [r0, #1]
 800219c:	071b      	lsls	r3, r3, #28
 800219e:	d4ef      	bmi.n	8002180 <_scanf_chars+0x48>
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	3601      	adds	r6, #1
 80021a4:	06da      	lsls	r2, r3, #27
 80021a6:	bf5e      	ittt	pl
 80021a8:	682b      	ldrpl	r3, [r5, #0]
 80021aa:	781b      	ldrbpl	r3, [r3, #0]
 80021ac:	703b      	strbpl	r3, [r7, #0]
 80021ae:	682a      	ldr	r2, [r5, #0]
 80021b0:	686b      	ldr	r3, [r5, #4]
 80021b2:	f102 0201 	add.w	r2, r2, #1
 80021b6:	602a      	str	r2, [r5, #0]
 80021b8:	68a2      	ldr	r2, [r4, #8]
 80021ba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80021be:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80021c2:	606b      	str	r3, [r5, #4]
 80021c4:	bf58      	it	pl
 80021c6:	3701      	addpl	r7, #1
 80021c8:	60a2      	str	r2, [r4, #8]
 80021ca:	b142      	cbz	r2, 80021de <_scanf_chars+0xa6>
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	dcc9      	bgt.n	8002164 <_scanf_chars+0x2c>
 80021d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80021d4:	4629      	mov	r1, r5
 80021d6:	4640      	mov	r0, r8
 80021d8:	4798      	blx	r3
 80021da:	2800      	cmp	r0, #0
 80021dc:	d0c2      	beq.n	8002164 <_scanf_chars+0x2c>
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	f013 0310 	ands.w	r3, r3, #16
 80021e4:	d105      	bne.n	80021f2 <_scanf_chars+0xba>
 80021e6:	68e2      	ldr	r2, [r4, #12]
 80021e8:	3201      	adds	r2, #1
 80021ea:	60e2      	str	r2, [r4, #12]
 80021ec:	69a2      	ldr	r2, [r4, #24]
 80021ee:	b102      	cbz	r2, 80021f2 <_scanf_chars+0xba>
 80021f0:	703b      	strb	r3, [r7, #0]
 80021f2:	6923      	ldr	r3, [r4, #16]
 80021f4:	2000      	movs	r0, #0
 80021f6:	441e      	add	r6, r3
 80021f8:	6126      	str	r6, [r4, #16]
 80021fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002200 <_scanf_i>:
 8002200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002204:	460c      	mov	r4, r1
 8002206:	469a      	mov	sl, r3
 8002208:	4b74      	ldr	r3, [pc, #464]	; (80023dc <_scanf_i+0x1dc>)
 800220a:	b087      	sub	sp, #28
 800220c:	4683      	mov	fp, r0
 800220e:	4616      	mov	r6, r2
 8002210:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002214:	ab03      	add	r3, sp, #12
 8002216:	68a7      	ldr	r7, [r4, #8]
 8002218:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800221c:	4b70      	ldr	r3, [pc, #448]	; (80023e0 <_scanf_i+0x1e0>)
 800221e:	69a1      	ldr	r1, [r4, #24]
 8002220:	4a70      	ldr	r2, [pc, #448]	; (80023e4 <_scanf_i+0x1e4>)
 8002222:	f104 091c 	add.w	r9, r4, #28
 8002226:	2903      	cmp	r1, #3
 8002228:	bf18      	it	ne
 800222a:	461a      	movne	r2, r3
 800222c:	1e7b      	subs	r3, r7, #1
 800222e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8002232:	bf84      	itt	hi
 8002234:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002238:	60a3      	strhi	r3, [r4, #8]
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	bf88      	it	hi
 800223e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002242:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8002246:	6023      	str	r3, [r4, #0]
 8002248:	bf98      	it	ls
 800224a:	2700      	movls	r7, #0
 800224c:	464b      	mov	r3, r9
 800224e:	f04f 0800 	mov.w	r8, #0
 8002252:	9200      	str	r2, [sp, #0]
 8002254:	bf88      	it	hi
 8002256:	197f      	addhi	r7, r7, r5
 8002258:	6831      	ldr	r1, [r6, #0]
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	ab03      	add	r3, sp, #12
 800225e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002262:	2202      	movs	r2, #2
 8002264:	7809      	ldrb	r1, [r1, #0]
 8002266:	f000 f9c9 	bl	80025fc <memchr>
 800226a:	9b01      	ldr	r3, [sp, #4]
 800226c:	b328      	cbz	r0, 80022ba <_scanf_i+0xba>
 800226e:	f1b8 0f01 	cmp.w	r8, #1
 8002272:	d156      	bne.n	8002322 <_scanf_i+0x122>
 8002274:	6862      	ldr	r2, [r4, #4]
 8002276:	b92a      	cbnz	r2, 8002284 <_scanf_i+0x84>
 8002278:	2208      	movs	r2, #8
 800227a:	6062      	str	r2, [r4, #4]
 800227c:	6822      	ldr	r2, [r4, #0]
 800227e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002282:	6022      	str	r2, [r4, #0]
 8002284:	6822      	ldr	r2, [r4, #0]
 8002286:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800228a:	6022      	str	r2, [r4, #0]
 800228c:	68a2      	ldr	r2, [r4, #8]
 800228e:	1e51      	subs	r1, r2, #1
 8002290:	60a1      	str	r1, [r4, #8]
 8002292:	b192      	cbz	r2, 80022ba <_scanf_i+0xba>
 8002294:	6832      	ldr	r2, [r6, #0]
 8002296:	1c5d      	adds	r5, r3, #1
 8002298:	1c51      	adds	r1, r2, #1
 800229a:	6031      	str	r1, [r6, #0]
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	6873      	ldr	r3, [r6, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	6073      	str	r3, [r6, #4]
 80022a8:	dc06      	bgt.n	80022b8 <_scanf_i+0xb8>
 80022aa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80022ae:	4631      	mov	r1, r6
 80022b0:	4658      	mov	r0, fp
 80022b2:	4798      	blx	r3
 80022b4:	2800      	cmp	r0, #0
 80022b6:	d177      	bne.n	80023a8 <_scanf_i+0x1a8>
 80022b8:	462b      	mov	r3, r5
 80022ba:	f108 0801 	add.w	r8, r8, #1
 80022be:	f1b8 0f03 	cmp.w	r8, #3
 80022c2:	d1c9      	bne.n	8002258 <_scanf_i+0x58>
 80022c4:	6862      	ldr	r2, [r4, #4]
 80022c6:	b90a      	cbnz	r2, 80022cc <_scanf_i+0xcc>
 80022c8:	220a      	movs	r2, #10
 80022ca:	6062      	str	r2, [r4, #4]
 80022cc:	6862      	ldr	r2, [r4, #4]
 80022ce:	4946      	ldr	r1, [pc, #280]	; (80023e8 <_scanf_i+0x1e8>)
 80022d0:	6960      	ldr	r0, [r4, #20]
 80022d2:	1a89      	subs	r1, r1, r2
 80022d4:	9301      	str	r3, [sp, #4]
 80022d6:	f000 f889 	bl	80023ec <__sccl>
 80022da:	9b01      	ldr	r3, [sp, #4]
 80022dc:	f04f 0800 	mov.w	r8, #0
 80022e0:	461d      	mov	r5, r3
 80022e2:	68a3      	ldr	r3, [r4, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d039      	beq.n	800235c <_scanf_i+0x15c>
 80022e8:	6831      	ldr	r1, [r6, #0]
 80022ea:	6960      	ldr	r0, [r4, #20]
 80022ec:	780a      	ldrb	r2, [r1, #0]
 80022ee:	5c80      	ldrb	r0, [r0, r2]
 80022f0:	2800      	cmp	r0, #0
 80022f2:	d033      	beq.n	800235c <_scanf_i+0x15c>
 80022f4:	2a30      	cmp	r2, #48	; 0x30
 80022f6:	6822      	ldr	r2, [r4, #0]
 80022f8:	d121      	bne.n	800233e <_scanf_i+0x13e>
 80022fa:	0510      	lsls	r0, r2, #20
 80022fc:	d51f      	bpl.n	800233e <_scanf_i+0x13e>
 80022fe:	f108 0801 	add.w	r8, r8, #1
 8002302:	b117      	cbz	r7, 800230a <_scanf_i+0x10a>
 8002304:	3301      	adds	r3, #1
 8002306:	3f01      	subs	r7, #1
 8002308:	60a3      	str	r3, [r4, #8]
 800230a:	6873      	ldr	r3, [r6, #4]
 800230c:	3b01      	subs	r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	6073      	str	r3, [r6, #4]
 8002312:	dd1c      	ble.n	800234e <_scanf_i+0x14e>
 8002314:	6833      	ldr	r3, [r6, #0]
 8002316:	3301      	adds	r3, #1
 8002318:	6033      	str	r3, [r6, #0]
 800231a:	68a3      	ldr	r3, [r4, #8]
 800231c:	3b01      	subs	r3, #1
 800231e:	60a3      	str	r3, [r4, #8]
 8002320:	e7df      	b.n	80022e2 <_scanf_i+0xe2>
 8002322:	f1b8 0f02 	cmp.w	r8, #2
 8002326:	d1b1      	bne.n	800228c <_scanf_i+0x8c>
 8002328:	6822      	ldr	r2, [r4, #0]
 800232a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800232e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002332:	d1c2      	bne.n	80022ba <_scanf_i+0xba>
 8002334:	2110      	movs	r1, #16
 8002336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233a:	6061      	str	r1, [r4, #4]
 800233c:	e7a5      	b.n	800228a <_scanf_i+0x8a>
 800233e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8002342:	6022      	str	r2, [r4, #0]
 8002344:	780b      	ldrb	r3, [r1, #0]
 8002346:	3501      	adds	r5, #1
 8002348:	f805 3c01 	strb.w	r3, [r5, #-1]
 800234c:	e7dd      	b.n	800230a <_scanf_i+0x10a>
 800234e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002352:	4631      	mov	r1, r6
 8002354:	4658      	mov	r0, fp
 8002356:	4798      	blx	r3
 8002358:	2800      	cmp	r0, #0
 800235a:	d0de      	beq.n	800231a <_scanf_i+0x11a>
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	05d9      	lsls	r1, r3, #23
 8002360:	d50c      	bpl.n	800237c <_scanf_i+0x17c>
 8002362:	454d      	cmp	r5, r9
 8002364:	d908      	bls.n	8002378 <_scanf_i+0x178>
 8002366:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800236a:	1e6f      	subs	r7, r5, #1
 800236c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002370:	4632      	mov	r2, r6
 8002372:	4658      	mov	r0, fp
 8002374:	4798      	blx	r3
 8002376:	463d      	mov	r5, r7
 8002378:	454d      	cmp	r5, r9
 800237a:	d02c      	beq.n	80023d6 <_scanf_i+0x1d6>
 800237c:	6822      	ldr	r2, [r4, #0]
 800237e:	f012 0210 	ands.w	r2, r2, #16
 8002382:	d11e      	bne.n	80023c2 <_scanf_i+0x1c2>
 8002384:	702a      	strb	r2, [r5, #0]
 8002386:	6863      	ldr	r3, [r4, #4]
 8002388:	4649      	mov	r1, r9
 800238a:	4658      	mov	r0, fp
 800238c:	9e00      	ldr	r6, [sp, #0]
 800238e:	47b0      	blx	r6
 8002390:	6822      	ldr	r2, [r4, #0]
 8002392:	f8da 3000 	ldr.w	r3, [sl]
 8002396:	f012 0f20 	tst.w	r2, #32
 800239a:	d008      	beq.n	80023ae <_scanf_i+0x1ae>
 800239c:	1d1a      	adds	r2, r3, #4
 800239e:	f8ca 2000 	str.w	r2, [sl]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6018      	str	r0, [r3, #0]
 80023a6:	e009      	b.n	80023bc <_scanf_i+0x1bc>
 80023a8:	f04f 0800 	mov.w	r8, #0
 80023ac:	e7d6      	b.n	800235c <_scanf_i+0x15c>
 80023ae:	07d2      	lsls	r2, r2, #31
 80023b0:	d5f4      	bpl.n	800239c <_scanf_i+0x19c>
 80023b2:	1d1a      	adds	r2, r3, #4
 80023b4:	f8ca 2000 	str.w	r2, [sl]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	8018      	strh	r0, [r3, #0]
 80023bc:	68e3      	ldr	r3, [r4, #12]
 80023be:	3301      	adds	r3, #1
 80023c0:	60e3      	str	r3, [r4, #12]
 80023c2:	2000      	movs	r0, #0
 80023c4:	eba5 0509 	sub.w	r5, r5, r9
 80023c8:	44a8      	add	r8, r5
 80023ca:	6925      	ldr	r5, [r4, #16]
 80023cc:	4445      	add	r5, r8
 80023ce:	6125      	str	r5, [r4, #16]
 80023d0:	b007      	add	sp, #28
 80023d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023d6:	2001      	movs	r0, #1
 80023d8:	e7fa      	b.n	80023d0 <_scanf_i+0x1d0>
 80023da:	bf00      	nop
 80023dc:	080026ac 	.word	0x080026ac
 80023e0:	08001d41 	.word	0x08001d41
 80023e4:	0800254d 	.word	0x0800254d
 80023e8:	08002772 	.word	0x08002772

080023ec <__sccl>:
 80023ec:	b570      	push	{r4, r5, r6, lr}
 80023ee:	780b      	ldrb	r3, [r1, #0]
 80023f0:	1e44      	subs	r4, r0, #1
 80023f2:	2b5e      	cmp	r3, #94	; 0x5e
 80023f4:	bf13      	iteet	ne
 80023f6:	1c4a      	addne	r2, r1, #1
 80023f8:	1c8a      	addeq	r2, r1, #2
 80023fa:	784b      	ldrbeq	r3, [r1, #1]
 80023fc:	2100      	movne	r1, #0
 80023fe:	bf08      	it	eq
 8002400:	2101      	moveq	r1, #1
 8002402:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8002406:	f804 1f01 	strb.w	r1, [r4, #1]!
 800240a:	42a5      	cmp	r5, r4
 800240c:	d1fb      	bne.n	8002406 <__sccl+0x1a>
 800240e:	b913      	cbnz	r3, 8002416 <__sccl+0x2a>
 8002410:	3a01      	subs	r2, #1
 8002412:	4610      	mov	r0, r2
 8002414:	bd70      	pop	{r4, r5, r6, pc}
 8002416:	f081 0401 	eor.w	r4, r1, #1
 800241a:	4611      	mov	r1, r2
 800241c:	54c4      	strb	r4, [r0, r3]
 800241e:	780d      	ldrb	r5, [r1, #0]
 8002420:	1c4a      	adds	r2, r1, #1
 8002422:	2d2d      	cmp	r5, #45	; 0x2d
 8002424:	d006      	beq.n	8002434 <__sccl+0x48>
 8002426:	2d5d      	cmp	r5, #93	; 0x5d
 8002428:	d0f3      	beq.n	8002412 <__sccl+0x26>
 800242a:	b90d      	cbnz	r5, 8002430 <__sccl+0x44>
 800242c:	460a      	mov	r2, r1
 800242e:	e7f0      	b.n	8002412 <__sccl+0x26>
 8002430:	462b      	mov	r3, r5
 8002432:	e7f2      	b.n	800241a <__sccl+0x2e>
 8002434:	784e      	ldrb	r6, [r1, #1]
 8002436:	2e5d      	cmp	r6, #93	; 0x5d
 8002438:	d0fa      	beq.n	8002430 <__sccl+0x44>
 800243a:	42b3      	cmp	r3, r6
 800243c:	dcf8      	bgt.n	8002430 <__sccl+0x44>
 800243e:	3102      	adds	r1, #2
 8002440:	3301      	adds	r3, #1
 8002442:	429e      	cmp	r6, r3
 8002444:	54c4      	strb	r4, [r0, r3]
 8002446:	dcfb      	bgt.n	8002440 <__sccl+0x54>
 8002448:	e7e9      	b.n	800241e <__sccl+0x32>

0800244a <_strtol_l.isra.0>:
 800244a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800244e:	4680      	mov	r8, r0
 8002450:	4689      	mov	r9, r1
 8002452:	4692      	mov	sl, r2
 8002454:	461f      	mov	r7, r3
 8002456:	468b      	mov	fp, r1
 8002458:	465d      	mov	r5, fp
 800245a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800245c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002460:	f7ff fc98 	bl	8001d94 <__locale_ctype_ptr_l>
 8002464:	4420      	add	r0, r4
 8002466:	7846      	ldrb	r6, [r0, #1]
 8002468:	f016 0608 	ands.w	r6, r6, #8
 800246c:	d10b      	bne.n	8002486 <_strtol_l.isra.0+0x3c>
 800246e:	2c2d      	cmp	r4, #45	; 0x2d
 8002470:	d10b      	bne.n	800248a <_strtol_l.isra.0+0x40>
 8002472:	2601      	movs	r6, #1
 8002474:	782c      	ldrb	r4, [r5, #0]
 8002476:	f10b 0502 	add.w	r5, fp, #2
 800247a:	b167      	cbz	r7, 8002496 <_strtol_l.isra.0+0x4c>
 800247c:	2f10      	cmp	r7, #16
 800247e:	d114      	bne.n	80024aa <_strtol_l.isra.0+0x60>
 8002480:	2c30      	cmp	r4, #48	; 0x30
 8002482:	d00a      	beq.n	800249a <_strtol_l.isra.0+0x50>
 8002484:	e011      	b.n	80024aa <_strtol_l.isra.0+0x60>
 8002486:	46ab      	mov	fp, r5
 8002488:	e7e6      	b.n	8002458 <_strtol_l.isra.0+0xe>
 800248a:	2c2b      	cmp	r4, #43	; 0x2b
 800248c:	bf04      	itt	eq
 800248e:	782c      	ldrbeq	r4, [r5, #0]
 8002490:	f10b 0502 	addeq.w	r5, fp, #2
 8002494:	e7f1      	b.n	800247a <_strtol_l.isra.0+0x30>
 8002496:	2c30      	cmp	r4, #48	; 0x30
 8002498:	d127      	bne.n	80024ea <_strtol_l.isra.0+0xa0>
 800249a:	782b      	ldrb	r3, [r5, #0]
 800249c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80024a0:	2b58      	cmp	r3, #88	; 0x58
 80024a2:	d14b      	bne.n	800253c <_strtol_l.isra.0+0xf2>
 80024a4:	2710      	movs	r7, #16
 80024a6:	786c      	ldrb	r4, [r5, #1]
 80024a8:	3502      	adds	r5, #2
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	bf0c      	ite	eq
 80024ae:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80024b2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80024b6:	2200      	movs	r2, #0
 80024b8:	fbb1 fef7 	udiv	lr, r1, r7
 80024bc:	4610      	mov	r0, r2
 80024be:	fb07 1c1e 	mls	ip, r7, lr, r1
 80024c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80024c6:	2b09      	cmp	r3, #9
 80024c8:	d811      	bhi.n	80024ee <_strtol_l.isra.0+0xa4>
 80024ca:	461c      	mov	r4, r3
 80024cc:	42a7      	cmp	r7, r4
 80024ce:	dd1d      	ble.n	800250c <_strtol_l.isra.0+0xc2>
 80024d0:	1c53      	adds	r3, r2, #1
 80024d2:	d007      	beq.n	80024e4 <_strtol_l.isra.0+0x9a>
 80024d4:	4586      	cmp	lr, r0
 80024d6:	d316      	bcc.n	8002506 <_strtol_l.isra.0+0xbc>
 80024d8:	d101      	bne.n	80024de <_strtol_l.isra.0+0x94>
 80024da:	45a4      	cmp	ip, r4
 80024dc:	db13      	blt.n	8002506 <_strtol_l.isra.0+0xbc>
 80024de:	2201      	movs	r2, #1
 80024e0:	fb00 4007 	mla	r0, r0, r7, r4
 80024e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80024e8:	e7eb      	b.n	80024c2 <_strtol_l.isra.0+0x78>
 80024ea:	270a      	movs	r7, #10
 80024ec:	e7dd      	b.n	80024aa <_strtol_l.isra.0+0x60>
 80024ee:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80024f2:	2b19      	cmp	r3, #25
 80024f4:	d801      	bhi.n	80024fa <_strtol_l.isra.0+0xb0>
 80024f6:	3c37      	subs	r4, #55	; 0x37
 80024f8:	e7e8      	b.n	80024cc <_strtol_l.isra.0+0x82>
 80024fa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80024fe:	2b19      	cmp	r3, #25
 8002500:	d804      	bhi.n	800250c <_strtol_l.isra.0+0xc2>
 8002502:	3c57      	subs	r4, #87	; 0x57
 8002504:	e7e2      	b.n	80024cc <_strtol_l.isra.0+0x82>
 8002506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800250a:	e7eb      	b.n	80024e4 <_strtol_l.isra.0+0x9a>
 800250c:	1c53      	adds	r3, r2, #1
 800250e:	d108      	bne.n	8002522 <_strtol_l.isra.0+0xd8>
 8002510:	2322      	movs	r3, #34	; 0x22
 8002512:	4608      	mov	r0, r1
 8002514:	f8c8 3000 	str.w	r3, [r8]
 8002518:	f1ba 0f00 	cmp.w	sl, #0
 800251c:	d107      	bne.n	800252e <_strtol_l.isra.0+0xe4>
 800251e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002522:	b106      	cbz	r6, 8002526 <_strtol_l.isra.0+0xdc>
 8002524:	4240      	negs	r0, r0
 8002526:	f1ba 0f00 	cmp.w	sl, #0
 800252a:	d00c      	beq.n	8002546 <_strtol_l.isra.0+0xfc>
 800252c:	b122      	cbz	r2, 8002538 <_strtol_l.isra.0+0xee>
 800252e:	3d01      	subs	r5, #1
 8002530:	f8ca 5000 	str.w	r5, [sl]
 8002534:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002538:	464d      	mov	r5, r9
 800253a:	e7f9      	b.n	8002530 <_strtol_l.isra.0+0xe6>
 800253c:	2430      	movs	r4, #48	; 0x30
 800253e:	2f00      	cmp	r7, #0
 8002540:	d1b3      	bne.n	80024aa <_strtol_l.isra.0+0x60>
 8002542:	2708      	movs	r7, #8
 8002544:	e7b1      	b.n	80024aa <_strtol_l.isra.0+0x60>
 8002546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800254c <_strtol_r>:
 800254c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800254e:	4c06      	ldr	r4, [pc, #24]	; (8002568 <_strtol_r+0x1c>)
 8002550:	4d06      	ldr	r5, [pc, #24]	; (800256c <_strtol_r+0x20>)
 8002552:	6824      	ldr	r4, [r4, #0]
 8002554:	6a24      	ldr	r4, [r4, #32]
 8002556:	2c00      	cmp	r4, #0
 8002558:	bf08      	it	eq
 800255a:	462c      	moveq	r4, r5
 800255c:	9400      	str	r4, [sp, #0]
 800255e:	f7ff ff74 	bl	800244a <_strtol_l.isra.0>
 8002562:	b003      	add	sp, #12
 8002564:	bd30      	pop	{r4, r5, pc}
 8002566:	bf00      	nop
 8002568:	20000048 	.word	0x20000048
 800256c:	200000b0 	.word	0x200000b0

08002570 <__submore>:
 8002570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002574:	460c      	mov	r4, r1
 8002576:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800257c:	4299      	cmp	r1, r3
 800257e:	d11c      	bne.n	80025ba <__submore+0x4a>
 8002580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002584:	f7fe ff92 	bl	80014ac <_malloc_r>
 8002588:	b918      	cbnz	r0, 8002592 <__submore+0x22>
 800258a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800258e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002596:	63a3      	str	r3, [r4, #56]	; 0x38
 8002598:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800259c:	6360      	str	r0, [r4, #52]	; 0x34
 800259e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80025a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80025a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80025aa:	7043      	strb	r3, [r0, #1]
 80025ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80025b0:	7003      	strb	r3, [r0, #0]
 80025b2:	6020      	str	r0, [r4, #0]
 80025b4:	2000      	movs	r0, #0
 80025b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025ba:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80025bc:	0077      	lsls	r7, r6, #1
 80025be:	463a      	mov	r2, r7
 80025c0:	f000 f82a 	bl	8002618 <_realloc_r>
 80025c4:	4605      	mov	r5, r0
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d0df      	beq.n	800258a <__submore+0x1a>
 80025ca:	eb00 0806 	add.w	r8, r0, r6
 80025ce:	4601      	mov	r1, r0
 80025d0:	4632      	mov	r2, r6
 80025d2:	4640      	mov	r0, r8
 80025d4:	f7fe ff12 	bl	80013fc <memcpy>
 80025d8:	f8c4 8000 	str.w	r8, [r4]
 80025dc:	6365      	str	r5, [r4, #52]	; 0x34
 80025de:	63a7      	str	r7, [r4, #56]	; 0x38
 80025e0:	e7e8      	b.n	80025b4 <__submore+0x44>

080025e2 <__ascii_wctomb>:
 80025e2:	b149      	cbz	r1, 80025f8 <__ascii_wctomb+0x16>
 80025e4:	2aff      	cmp	r2, #255	; 0xff
 80025e6:	bf8b      	itete	hi
 80025e8:	238a      	movhi	r3, #138	; 0x8a
 80025ea:	700a      	strbls	r2, [r1, #0]
 80025ec:	6003      	strhi	r3, [r0, #0]
 80025ee:	2001      	movls	r0, #1
 80025f0:	bf88      	it	hi
 80025f2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80025f6:	4770      	bx	lr
 80025f8:	4608      	mov	r0, r1
 80025fa:	4770      	bx	lr

080025fc <memchr>:
 80025fc:	b510      	push	{r4, lr}
 80025fe:	b2c9      	uxtb	r1, r1
 8002600:	4402      	add	r2, r0
 8002602:	4290      	cmp	r0, r2
 8002604:	4603      	mov	r3, r0
 8002606:	d101      	bne.n	800260c <memchr+0x10>
 8002608:	2000      	movs	r0, #0
 800260a:	bd10      	pop	{r4, pc}
 800260c:	781c      	ldrb	r4, [r3, #0]
 800260e:	3001      	adds	r0, #1
 8002610:	428c      	cmp	r4, r1
 8002612:	d1f6      	bne.n	8002602 <memchr+0x6>
 8002614:	4618      	mov	r0, r3
 8002616:	bd10      	pop	{r4, pc}

08002618 <_realloc_r>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	4607      	mov	r7, r0
 800261c:	4614      	mov	r4, r2
 800261e:	460e      	mov	r6, r1
 8002620:	b921      	cbnz	r1, 800262c <_realloc_r+0x14>
 8002622:	4611      	mov	r1, r2
 8002624:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002628:	f7fe bf40 	b.w	80014ac <_malloc_r>
 800262c:	b922      	cbnz	r2, 8002638 <_realloc_r+0x20>
 800262e:	f7fe fef1 	bl	8001414 <_free_r>
 8002632:	4625      	mov	r5, r4
 8002634:	4628      	mov	r0, r5
 8002636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002638:	f000 f814 	bl	8002664 <_malloc_usable_size_r>
 800263c:	4284      	cmp	r4, r0
 800263e:	d90f      	bls.n	8002660 <_realloc_r+0x48>
 8002640:	4621      	mov	r1, r4
 8002642:	4638      	mov	r0, r7
 8002644:	f7fe ff32 	bl	80014ac <_malloc_r>
 8002648:	4605      	mov	r5, r0
 800264a:	2800      	cmp	r0, #0
 800264c:	d0f2      	beq.n	8002634 <_realloc_r+0x1c>
 800264e:	4631      	mov	r1, r6
 8002650:	4622      	mov	r2, r4
 8002652:	f7fe fed3 	bl	80013fc <memcpy>
 8002656:	4631      	mov	r1, r6
 8002658:	4638      	mov	r0, r7
 800265a:	f7fe fedb 	bl	8001414 <_free_r>
 800265e:	e7e9      	b.n	8002634 <_realloc_r+0x1c>
 8002660:	4635      	mov	r5, r6
 8002662:	e7e7      	b.n	8002634 <_realloc_r+0x1c>

08002664 <_malloc_usable_size_r>:
 8002664:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002668:	2800      	cmp	r0, #0
 800266a:	f1a0 0004 	sub.w	r0, r0, #4
 800266e:	bfbc      	itt	lt
 8002670:	580b      	ldrlt	r3, [r1, r0]
 8002672:	18c0      	addlt	r0, r0, r3
 8002674:	4770      	bx	lr
	...

08002678 <_sbrk>:
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <_sbrk+0x14>)
 800267a:	4602      	mov	r2, r0
 800267c:	6819      	ldr	r1, [r3, #0]
 800267e:	b909      	cbnz	r1, 8002684 <_sbrk+0xc>
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <_sbrk+0x18>)
 8002682:	6019      	str	r1, [r3, #0]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	4402      	add	r2, r0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	4770      	bx	lr
 800268c:	20000368 	.word	0x20000368
 8002690:	200005cc 	.word	0x200005cc

08002694 <_init>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr

080026a0 <_fini>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	bf00      	nop
 80026a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a6:	bc08      	pop	{r3}
 80026a8:	469e      	mov	lr, r3
 80026aa:	4770      	bx	lr
