
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009b4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b98  08000ba0  00010ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000b98  08000b98  00010b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000b9c  08000b9c  00010b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000028  20000000  08000ba0  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  20000028  08000ba0  00020028  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010ba0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000353c  00000000  00000000  00010bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000d20  00000000  00000000  00014105  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000480  00000000  00000000  00014e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  000152a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001c11  00000000  00000000  00015690  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001791  00000000  00000000  000172a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00018a32  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001130  00000000  00000000  00018ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00019be0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000000 	.word	0x20000000
 8000200:	00000000 	.word	0x00000000
 8000204:	08000b80 	.word	0x08000b80

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000004 	.word	0x20000004
 8000220:	08000b80 	.word	0x08000b80

08000224 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800022e:	4907      	ldr	r1, [pc, #28]	; (800024c <NVIC_SetVectorTable+0x28>)
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000236:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	4313      	orrs	r3, r2
 800023e:	608b      	str	r3, [r1, #8]
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	e000ed00 	.word	0xe000ed00

08000250 <FLASH_Unlock>:
  *           to FLASH_UnlockBank1 function.. 
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <FLASH_Unlock+0x18>)
 8000256:	4a05      	ldr	r2, [pc, #20]	; (800026c <FLASH_Unlock+0x1c>)
 8000258:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <FLASH_Unlock+0x18>)
 800025c:	4a04      	ldr	r2, [pc, #16]	; (8000270 <FLASH_Unlock+0x20>)
 800025e:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	40022000 	.word	0x40022000
 800026c:	45670123 	.word	0x45670123
 8000270:	cdef89ab 	.word	0xcdef89ab

08000274 <FLASH_Lock>:
  *           to FLASH_LockBank1 function.
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
  FLASH->CR |= CR_LOCK_Set;
 8000278:	4a04      	ldr	r2, [pc, #16]	; (800028c <FLASH_Lock+0x18>)
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <FLASH_Lock+0x18>)
 800027c:	691b      	ldr	r3, [r3, #16]
 800027e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000282:	6113      	str	r3, [r2, #16]

#ifdef STM32F10X_XL
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
  FLASH->CR2 |= CR_LOCK_Set;
#endif /* STM32F10X_XL */
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	40022000 	.word	0x40022000

08000290 <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8000298:	2304      	movs	r3, #4
 800029a:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 800029c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80002a0:	f000 f89c 	bl	80003dc <FLASH_WaitForLastOperation>
 80002a4:	4603      	mov	r3, r0
 80002a6:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	2b04      	cmp	r3, #4
 80002ac:	d11b      	bne.n	80002e6 <FLASH_ErasePage+0x56>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 80002ae:	4a10      	ldr	r2, [pc, #64]	; (80002f0 <FLASH_ErasePage+0x60>)
 80002b0:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <FLASH_ErasePage+0x60>)
 80002b2:	691b      	ldr	r3, [r3, #16]
 80002b4:	f043 0302 	orr.w	r3, r3, #2
 80002b8:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 80002ba:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <FLASH_ErasePage+0x60>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	6153      	str	r3, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 80002c0:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <FLASH_ErasePage+0x60>)
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <FLASH_ErasePage+0x60>)
 80002c4:	691b      	ldr	r3, [r3, #16]
 80002c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ca:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80002cc:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80002d0:	f000 f884 	bl	80003dc <FLASH_WaitForLastOperation>
 80002d4:	4603      	mov	r3, r0
 80002d6:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 80002d8:	4905      	ldr	r1, [pc, #20]	; (80002f0 <FLASH_ErasePage+0x60>)
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <FLASH_ErasePage+0x60>)
 80002dc:	691a      	ldr	r2, [r3, #16]
 80002de:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 80002e2:	4013      	ands	r3, r2
 80002e4:	610b      	str	r3, [r1, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40022000 	.word	0x40022000

080002f4 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 80002fe:	2304      	movs	r3, #4
 8000300:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t tmp = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
      }
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000306:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800030a:	f000 f867 	bl	80003dc <FLASH_WaitForLastOperation>
 800030e:	4603      	mov	r3, r0
 8000310:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8000312:	7bfb      	ldrb	r3, [r7, #15]
 8000314:	2b04      	cmp	r3, #4
 8000316:	d130      	bne.n	800037a <FLASH_ProgramWord+0x86>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8000318:	4a1a      	ldr	r2, [pc, #104]	; (8000384 <FLASH_ProgramWord+0x90>)
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <FLASH_ProgramWord+0x90>)
 800031c:	691b      	ldr	r3, [r3, #16]
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	683a      	ldr	r2, [r7, #0]
 8000328:	b292      	uxth	r2, r2
 800032a:	801a      	strh	r2, [r3, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800032c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000330:	f000 f854 	bl	80003dc <FLASH_WaitForLastOperation>
 8000334:	4603      	mov	r3, r0
 8000336:	73fb      	strb	r3, [r7, #15]
 
    if(status == FLASH_COMPLETE)
 8000338:	7bfb      	ldrb	r3, [r7, #15]
 800033a:	2b04      	cmp	r3, #4
 800033c:	d116      	bne.n	800036c <FLASH_ProgramWord+0x78>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      tmp = Address + 2;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	3302      	adds	r3, #2
 8000342:	60bb      	str	r3, [r7, #8]

      *(__IO uint16_t*) tmp = Data >> 16;
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	461a      	mov	r2, r3
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	0c1b      	lsrs	r3, r3, #16
 800034c:	b29b      	uxth	r3, r3
 800034e:	8013      	strh	r3, [r2, #0]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8000350:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000354:	f000 f842 	bl	80003dc <FLASH_WaitForLastOperation>
 8000358:	4603      	mov	r3, r0
 800035a:	73fb      	strb	r3, [r7, #15]
        
      /* Disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 800035c:	4909      	ldr	r1, [pc, #36]	; (8000384 <FLASH_ProgramWord+0x90>)
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <FLASH_ProgramWord+0x90>)
 8000360:	691a      	ldr	r2, [r3, #16]
 8000362:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8000366:	4013      	ands	r3, r2
 8000368:	610b      	str	r3, [r1, #16]
 800036a:	e006      	b.n	800037a <FLASH_ProgramWord+0x86>
    }
    else
    {
      /* Disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 800036c:	4905      	ldr	r1, [pc, #20]	; (8000384 <FLASH_ProgramWord+0x90>)
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <FLASH_ProgramWord+0x90>)
 8000370:	691a      	ldr	r2, [r3, #16]
 8000372:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8000376:	4013      	ands	r3, r2
 8000378:	610b      	str	r3, [r1, #16]
    }
  }         
#endif /* STM32F10X_XL */
   
  /* Return the Program Status */
  return status;
 800037a:	7bfb      	ldrb	r3, [r7, #15]
}
 800037c:	4618      	mov	r0, r3
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40022000 	.word	0x40022000

08000388 <FLASH_GetBank1Status>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetBank1Status(void)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 800038e:	2304      	movs	r3, #4
 8000390:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <FLASH_GetBank1Status+0x50>)
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	2b01      	cmp	r3, #1
 800039c:	d102      	bne.n	80003a4 <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
 800039e:	2301      	movs	r3, #1
 80003a0:	71fb      	strb	r3, [r7, #7]
 80003a2:	e013      	b.n	80003cc <FLASH_GetBank1Status+0x44>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <FLASH_GetBank1Status+0x50>)
 80003a6:	68db      	ldr	r3, [r3, #12]
 80003a8:	f003 0304 	and.w	r3, r3, #4
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d002      	beq.n	80003b6 <FLASH_GetBank1Status+0x2e>
    { 
      flashstatus = FLASH_ERROR_PG;
 80003b0:	2302      	movs	r3, #2
 80003b2:	71fb      	strb	r3, [r7, #7]
 80003b4:	e00a      	b.n	80003cc <FLASH_GetBank1Status+0x44>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <FLASH_GetBank1Status+0x50>)
 80003b8:	68db      	ldr	r3, [r3, #12]
 80003ba:	f003 0310 	and.w	r3, r3, #16
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d002      	beq.n	80003c8 <FLASH_GetBank1Status+0x40>
      {
        flashstatus = FLASH_ERROR_WRP;
 80003c2:	2303      	movs	r3, #3
 80003c4:	71fb      	strb	r3, [r7, #7]
 80003c6:	e001      	b.n	80003cc <FLASH_GetBank1Status+0x44>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 80003c8:	2304      	movs	r3, #4
 80003ca:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 80003cc:	79fb      	ldrb	r3, [r7, #7]
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	40022000 	.word	0x40022000

080003dc <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 80003e4:	2304      	movs	r3, #4
 80003e6:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 80003e8:	f7ff ffce 	bl	8000388 <FLASH_GetBank1Status>
 80003ec:	4603      	mov	r3, r0
 80003ee:	73fb      	strb	r3, [r7, #15]
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80003f0:	e006      	b.n	8000400 <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetBank1Status();
 80003f2:	f7ff ffc9 	bl	8000388 <FLASH_GetBank1Status>
 80003f6:	4603      	mov	r3, r0
 80003f8:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d102      	bne.n	800040c <FLASH_WaitForLastOperation+0x30>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1f2      	bne.n	80003f2 <FLASH_WaitForLastOperation+0x16>
  }
  if(Timeout == 0x00 )
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d101      	bne.n	8000416 <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 8000412:	2305      	movs	r3, #5
 8000414:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 8000416:	7bfb      	ldrb	r3, [r7, #15]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000420:	b480      	push	{r7}
 8000422:	b089      	sub	sp, #36	; 0x24
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
 800042e:	2300      	movs	r3, #0
 8000430:	613b      	str	r3, [r7, #16]
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
 8000436:	2300      	movs	r3, #0
 8000438:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]
 800043e:	2300      	movs	r3, #0
 8000440:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	78db      	ldrb	r3, [r3, #3]
 8000446:	f003 030f 	and.w	r3, r3, #15
 800044a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	78db      	ldrb	r3, [r3, #3]
 8000450:	f003 0310 	and.w	r3, r3, #16
 8000454:	2b00      	cmp	r3, #0
 8000456:	d005      	beq.n	8000464 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	789b      	ldrb	r3, [r3, #2]
 800045c:	461a      	mov	r2, r3
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	4313      	orrs	r3, r2
 8000462:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	b2db      	uxtb	r3, r3
 800046a:	2b00      	cmp	r3, #0
 800046c:	d044      	beq.n	80004f8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000474:	2300      	movs	r3, #0
 8000476:	61bb      	str	r3, [r7, #24]
 8000478:	e038      	b.n	80004ec <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800047a:	2201      	movs	r2, #1
 800047c:	69bb      	ldr	r3, [r7, #24]
 800047e:	fa02 f303 	lsl.w	r3, r2, r3
 8000482:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	461a      	mov	r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	4013      	ands	r3, r2
 800048e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000490:	693a      	ldr	r2, [r7, #16]
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	429a      	cmp	r2, r3
 8000496:	d126      	bne.n	80004e6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000498:	69bb      	ldr	r3, [r7, #24]
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800049e:	220f      	movs	r2, #15
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	fa02 f303 	lsl.w	r3, r2, r3
 80004a6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	43db      	mvns	r3, r3
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	4013      	ands	r3, r2
 80004b0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80004b2:	69fa      	ldr	r2, [r7, #28]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	697a      	ldr	r2, [r7, #20]
 80004bc:	4313      	orrs	r3, r2
 80004be:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	78db      	ldrb	r3, [r3, #3]
 80004c4:	2b28      	cmp	r3, #40	; 0x28
 80004c6:	d105      	bne.n	80004d4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80004c8:	2201      	movs	r2, #1
 80004ca:	69bb      	ldr	r3, [r7, #24]
 80004cc:	409a      	lsls	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	615a      	str	r2, [r3, #20]
 80004d2:	e008      	b.n	80004e6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	78db      	ldrb	r3, [r3, #3]
 80004d8:	2b48      	cmp	r3, #72	; 0x48
 80004da:	d104      	bne.n	80004e6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80004dc:	2201      	movs	r2, #1
 80004de:	69bb      	ldr	r3, [r7, #24]
 80004e0:	409a      	lsls	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80004e6:	69bb      	ldr	r3, [r7, #24]
 80004e8:	3301      	adds	r3, #1
 80004ea:	61bb      	str	r3, [r7, #24]
 80004ec:	69bb      	ldr	r3, [r7, #24]
 80004ee:	2b07      	cmp	r3, #7
 80004f0:	d9c3      	bls.n	800047a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	2bff      	cmp	r3, #255	; 0xff
 80004fe:	d946      	bls.n	800058e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
 800050a:	e03a      	b.n	8000582 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800050c:	69bb      	ldr	r3, [r7, #24]
 800050e:	3308      	adds	r3, #8
 8000510:	2201      	movs	r2, #1
 8000512:	fa02 f303 	lsl.w	r3, r2, r3
 8000516:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	4013      	ands	r3, r2
 8000522:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000524:	693a      	ldr	r2, [r7, #16]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	429a      	cmp	r2, r3
 800052a:	d127      	bne.n	800057c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800052c:	69bb      	ldr	r3, [r7, #24]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000532:	220f      	movs	r2, #15
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	fa02 f303 	lsl.w	r3, r2, r3
 800053a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	43db      	mvns	r3, r3
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	4013      	ands	r3, r2
 8000544:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	fa02 f303 	lsl.w	r3, r2, r3
 800054e:	697a      	ldr	r2, [r7, #20]
 8000550:	4313      	orrs	r3, r2
 8000552:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	78db      	ldrb	r3, [r3, #3]
 8000558:	2b28      	cmp	r3, #40	; 0x28
 800055a:	d105      	bne.n	8000568 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	3308      	adds	r3, #8
 8000560:	2201      	movs	r2, #1
 8000562:	409a      	lsls	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	78db      	ldrb	r3, [r3, #3]
 800056c:	2b48      	cmp	r3, #72	; 0x48
 800056e:	d105      	bne.n	800057c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	3308      	adds	r3, #8
 8000574:	2201      	movs	r2, #1
 8000576:	409a      	lsls	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800057c:	69bb      	ldr	r3, [r7, #24]
 800057e:	3301      	adds	r3, #1
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	2b07      	cmp	r3, #7
 8000586:	d9c1      	bls.n	800050c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	605a      	str	r2, [r3, #4]
  }
}
 800058e:	bf00      	nop
 8000590:	3724      	adds	r7, #36	; 0x24
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80005a4:	887a      	ldrh	r2, [r7, #2]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	611a      	str	r2, [r3, #16]
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80005c0:	887a      	ldrh	r2, [r7, #2]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	615a      	str	r2, [r3, #20]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d006      	beq.n	80005f0 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80005e2:	4909      	ldr	r1, [pc, #36]	; (8000608 <RCC_AHBPeriphClockCmd+0x38>)
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <RCC_AHBPeriphClockCmd+0x38>)
 80005e6:	695a      	ldr	r2, [r3, #20]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80005ee:	e006      	b.n	80005fe <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80005f0:	4905      	ldr	r1, [pc, #20]	; (8000608 <RCC_AHBPeriphClockCmd+0x38>)
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <RCC_AHBPeriphClockCmd+0x38>)
 80005f4:	695a      	ldr	r2, [r3, #20]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	43db      	mvns	r3, r3
 80005fa:	4013      	ands	r3, r2
 80005fc:	614b      	str	r3, [r1, #20]
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40021000 	.word	0x40021000

0800060c <read_header>:
 * ddmmyyyy - date of build
 * ssss - 4 bytes for size of a core(in bytes).
 * @param - none
 * @return  - 0 if no header; 1 if new  core detected
 * */
uint8_t read_header(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
	uint8_t ret_val=0;
 8000612:	2300      	movs	r3, #0
 8000614:	77fb      	strb	r3, [r7, #31]
	uint8_t buf[16];
	uint32_t addr=0;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]

	memset(buf,0,sizeof(buf));
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2210      	movs	r2, #16
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f000 faa5 	bl	8000b70 <memset>
	addr = NEW_CORE_FLASH_ADDR;
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <read_header+0x6c>)
 8000628:	61bb      	str	r3, [r7, #24]
	for(int i;i<16;i++, addr++){
 800062a:	e00d      	b.n	8000648 <read_header+0x3c>
		buf[i] = *(volatile uint8_t*)addr;
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b2d9      	uxtb	r1, r3
 8000632:	1d3a      	adds	r2, r7, #4
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	4413      	add	r3, r2
 8000638:	460a      	mov	r2, r1
 800063a:	701a      	strb	r2, [r3, #0]
	for(int i;i<16;i++, addr++){
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	3301      	adds	r3, #1
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	3301      	adds	r3, #1
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	2b0f      	cmp	r3, #15
 800064c:	ddee      	ble.n	800062c <read_header+0x20>
	}
	if((buf[0] == 'v')&&(buf[1] == 'e')&&(buf[2] == 'r')){
 800064e:	793b      	ldrb	r3, [r7, #4]
 8000650:	2b76      	cmp	r3, #118	; 0x76
 8000652:	d10c      	bne.n	800066e <read_header+0x62>
 8000654:	797b      	ldrb	r3, [r7, #5]
 8000656:	2b65      	cmp	r3, #101	; 0x65
 8000658:	d109      	bne.n	800066e <read_header+0x62>
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	2b72      	cmp	r3, #114	; 0x72
 800065e:	d106      	bne.n	800066e <read_header+0x62>
		ret_val = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	77fb      	strb	r3, [r7, #31]
		new_core_size = *(uint32_t*)&buf[12];
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	330c      	adds	r3, #12
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <read_header+0x70>)
 800066c:	6013      	str	r3, [r2, #0]
	}
	return ret_val;
 800066e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	08010000 	.word	0x08010000
 800067c:	2000001c 	.word	0x2000001c

08000680 <replace_core>:
/**
 * @brief copies a newly discovered version of a core to a place of an old one.
 * @param none
 * @return	0-if all ok; 1-if error
 * */
uint8_t replace_core(void){
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

	uint32_t addr_cpy_from =NEW_CORE_FLASH_ADDR+CORE_HEADER_SIZE;
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <replace_core+0x80>)
 8000688:	617b      	str	r3, [r7, #20]
	uint32_t addr_cpy_to = CURRENT_CORE_FLASH_ADDR;
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <replace_core+0x84>)
 800068c:	613b      	str	r3, [r7, #16]
	uint32_t carrier_word=0;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
	uint8_t func_ret_val = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	71fb      	strb	r3, [r7, #7]
	FLASH_Status st;
	//clear space for a new version
	func_ret_val = erase_sector(CURRENT_CORE_FLASH_ADDR,8);
 8000696:	2108      	movs	r1, #8
 8000698:	481a      	ldr	r0, [pc, #104]	; (8000704 <replace_core+0x84>)
 800069a:	f000 f839 	bl	8000710 <erase_sector>
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	if(func_ret_val){
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d004      	beq.n	80006b2 <replace_core+0x32>
		errno = FLASH_ERASE_ERR;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <replace_core+0x88>)
 80006aa:	2203      	movs	r2, #3
 80006ac:	601a      	str	r2, [r3, #0]
		return 1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e022      	b.n	80006f8 <replace_core+0x78>
	}

	//start copying
	for(int i=0; i<new_core_size;i++){
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	e019      	b.n	80006ec <replace_core+0x6c>
		carrier_word = *(uint32_t*)addr_cpy_from;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	60bb      	str	r3, [r7, #8]
		st=FLASH_ProgramWord(addr_cpy_to,carrier_word);
 80006be:	68b9      	ldr	r1, [r7, #8]
 80006c0:	6938      	ldr	r0, [r7, #16]
 80006c2:	f7ff fe17 	bl	80002f4 <FLASH_ProgramWord>
 80006c6:	4603      	mov	r3, r0
 80006c8:	71bb      	strb	r3, [r7, #6]
		if(st != FLASH_COMPLETE){
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	d004      	beq.n	80006da <replace_core+0x5a>
			errno = FLASH_WR_ERR;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <replace_core+0x88>)
 80006d2:	2202      	movs	r2, #2
 80006d4:	601a      	str	r2, [r3, #0]
			return 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00e      	b.n	80006f8 <replace_core+0x78>
		}
		addr_cpy_from+=4;
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	3304      	adds	r3, #4
 80006de:	617b      	str	r3, [r7, #20]
		addr_cpy_to+=4;
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	3304      	adds	r3, #4
 80006e4:	613b      	str	r3, [r7, #16]
	for(int i=0; i<new_core_size;i++){
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	3301      	adds	r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <replace_core+0x8c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d3e0      	bcc.n	80006b8 <replace_core+0x38>
	}
	return 0;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	08010010 	.word	0x08010010
 8000704:	08004000 	.word	0x08004000
 8000708:	20000020 	.word	0x20000020
 800070c:	2000001c 	.word	0x2000001c

08000710 <erase_sector>:
 * @param amount of pages to erase
 * @return ret_val-0 if all ok;
 * 1 if amount of pages is too high
 * 2 if flash erase error
*/
uint8_t erase_sector(uint32_t start_page_addr, uint8_t pages_amount){
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]

	FLASH_Status st;
	uint32_t addr = start_page_addr;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	617b      	str	r3, [r7, #20]

	//assert
	uint32_t last_addr = start_page_addr+pages_amount*STM32F107_PAGE_SIZE;
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	02db      	lsls	r3, r3, #11
 8000724:	461a      	mov	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	60fb      	str	r3, [r7, #12]
	if(last_addr > STM32F107_LAST_PAGE_ADDR){
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4a11      	ldr	r2, [pc, #68]	; (8000774 <erase_sector+0x64>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d901      	bls.n	8000738 <erase_sector+0x28>
		return 1;
 8000734:	2301      	movs	r3, #1
 8000736:	e018      	b.n	800076a <erase_sector+0x5a>
	}

	for(uint8_t i=0;i<pages_amount;i++){
 8000738:	2300      	movs	r3, #0
 800073a:	74fb      	strb	r3, [r7, #19]
 800073c:	e010      	b.n	8000760 <erase_sector+0x50>
		st = FLASH_ErasePage(addr);
 800073e:	6978      	ldr	r0, [r7, #20]
 8000740:	f7ff fda6 	bl	8000290 <FLASH_ErasePage>
 8000744:	4603      	mov	r3, r0
 8000746:	72fb      	strb	r3, [r7, #11]
		if(st != FLASH_COMPLETE){
 8000748:	7afb      	ldrb	r3, [r7, #11]
 800074a:	2b04      	cmp	r3, #4
 800074c:	d001      	beq.n	8000752 <erase_sector+0x42>
				return 2;
 800074e:	2302      	movs	r3, #2
 8000750:	e00b      	b.n	800076a <erase_sector+0x5a>
		}
		addr+=STM32F107_PAGE_SIZE;
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000758:	617b      	str	r3, [r7, #20]
	for(uint8_t i=0;i<pages_amount;i++){
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	3301      	adds	r3, #1
 800075e:	74fb      	strb	r3, [r7, #19]
 8000760:	7cfa      	ldrb	r2, [r7, #19]
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	429a      	cmp	r2, r3
 8000766:	d3ea      	bcc.n	800073e <erase_sector+0x2e>
	}
	return 0;
 8000768:	2300      	movs	r3, #0

}
 800076a:	4618      	mov	r0, r3
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	0803f800 	.word	0x0803f800

08000778 <__jump>:
/**
 * @brief jump to main program
 * @param addr - main program address
 * @return none
 * */
void __jump(uint32_t addr){
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

	uint32_t jump_address = *(__IO uint32_t*)(addr+4);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3304      	adds	r3, #4
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	617b      	str	r3, [r7, #20]


	jump_to_app = (pFun)jump_address;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <__jump+0x50>)
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	2301      	movs	r3, #1
 8000790:	60bb      	str	r3, [r7, #8]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) static __INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(1);
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, APPLICATION_OFFSET);
 8000798:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80007a0:	f7ff fd40 	bl	8000224 <NVIC_SetVectorTable>
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(0);
	__set_MSP(*(__IO uint32_t*)addr);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	f383 8808 	msr	MSP, r3
	jump_to_app();
 80007ba:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <__jump+0x50>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4798      	blx	r3

}
 80007c0:	bf00      	nop
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000024 	.word	0x20000024

080007cc <check_core>:
 * @brief the function checks whether there is a new core or not;
 * if it is, replaces old core and erases new core flash sectors
 * @param none
 * @return none
 * */
void check_core(void){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
	uint8_t temp=0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	71fb      	strb	r3, [r7, #7]
	FLASH_Unlock();
 80007d6:	f7ff fd3b 	bl	8000250 <FLASH_Unlock>
	temp = read_header();
 80007da:	f7ff ff17 	bl	800060c <read_header>
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	if(temp == 1){  //bingo! new core.
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d10f      	bne.n	8000808 <check_core+0x3c>

		temp = replace_core();
 80007e8:	f7ff ff4a 	bl	8000680 <replace_core>
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
		if(temp != 0){ //if error
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d10b      	bne.n	800080e <check_core+0x42>
			//place here a code to notify people that shit happened
			return;
		}
		//otherwise erase already copied sector
		temp = erase_sector(NEW_CORE_FLASH_ADDR,PAGES_AMOUNT_TO_ERASE);
 80007f6:	2140      	movs	r1, #64	; 0x40
 80007f8:	4808      	ldr	r0, [pc, #32]	; (800081c <check_core+0x50>)
 80007fa:	f7ff ff89 	bl	8000710 <erase_sector>
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
		if(temp != 0){ //if error
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d104      	bne.n	8000812 <check_core+0x46>
			//place here a code to notify people that shit happened
			return;
		}
	}
	FLASH_Lock();
 8000808:	f7ff fd34 	bl	8000274 <FLASH_Lock>
 800080c:	e002      	b.n	8000814 <check_core+0x48>
			return;
 800080e:	bf00      	nop
 8000810:	e000      	b.n	8000814 <check_core+0x48>
			return;
 8000812:	bf00      	nop
}
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08010000 	.word	0x08010000

08000820 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	sys_init();
 8000826:	f000 f885 	bl	8000934 <sys_init>
	check_core();
 800082a:	f7ff ffcf 	bl	80007cc <check_core>
	if(errno == 0 ){
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <main+0x5c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d102      	bne.n	800083c <main+0x1c>
		__jump(CURRENT_CORE_FLASH_ADDR);
 8000836:	4812      	ldr	r0, [pc, #72]	; (8000880 <main+0x60>)
 8000838:	f7ff ff9e 	bl	8000778 <__jump>
	}
	//should not get here
	while(1){
		//place a code to show that an error occured
		for(int i=0;i<1000000;i++);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	e002      	b.n	8000848 <main+0x28>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3301      	adds	r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <main+0x64>)
 800084c:	4293      	cmp	r3, r2
 800084e:	ddf8      	ble.n	8000842 <main+0x22>
		GPIO_SetBits(GPIOB,GPIO_Pin_15);
 8000850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <main+0x68>)
 8000856:	f7ff fe9f 	bl	8000598 <GPIO_SetBits>

		for(int i=0;i<1000000;i++);
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	e002      	b.n	8000866 <main+0x46>
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <main+0x64>)
 800086a:	4293      	cmp	r3, r2
 800086c:	ddf8      	ble.n	8000860 <main+0x40>
		GPIO_ResetBits(GPIOB,GPIO_Pin_15);
 800086e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <main+0x68>)
 8000874:	f7ff fe9e 	bl	80005b4 <GPIO_ResetBits>
		for(int i=0;i<1000000;i++);
 8000878:	e7e0      	b.n	800083c <main+0x1c>
 800087a:	bf00      	nop
 800087c:	20000020 	.word	0x20000020
 8000880:	08004000 	.word	0x08004000
 8000884:	000f423f 	.word	0x000f423f
 8000888:	40010c00 	.word	0x40010c00

0800088c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800088c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000890:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000892:	e003      	b.n	800089c <LoopCopyDataInit>

08000894 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000896:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000898:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800089a:	3104      	adds	r1, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80008a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008a4:	d3f6      	bcc.n	8000894 <CopyDataInit>
	ldr	r2, =_sbss
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80008a8:	e002      	b.n	80008b0 <LoopFillZerobss>

080008aa <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008ac:	f842 3b04 	str.w	r3, [r2], #4

080008b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80008b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008b4:	d3f9      	bcc.n	80008aa <FillZerobss>

/* Call the clock system intitialization function.*/
  	bl  SystemInit
 80008b6:	f000 f857 	bl	8000968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ba:	f000 f935 	bl	8000b28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008be:	f7ff ffaf 	bl	8000820 <main>
	bx	lr
 80008c2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008c4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80008c8:	08000ba0 	.word	0x08000ba0
	ldr	r0, =_sdata
 80008cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80008d0:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 80008d4:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 80008d8:	20000028 	.word	0x20000028

080008dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_2_IRQHandler>

080008de <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr

08000926 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
	...

08000934 <sys_init>:

/**
 * @brief all system init;
 * Called from main()
 * */
void sys_init(void){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

	//led init led
	RCC_AHBPeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800093a:	2101      	movs	r1, #1
 800093c:	2008      	movs	r0, #8
 800093e:	f7ff fe47 	bl	80005d0 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef g;
	g.GPIO_Mode = GPIO_Mode_Out_PP;
 8000942:	2310      	movs	r3, #16
 8000944:	71fb      	strb	r3, [r7, #7]
	g.GPIO_Pin = GPIO_Pin_15;
 8000946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800094a:	80bb      	strh	r3, [r7, #4]
	g.GPIO_Speed = GPIO_Speed_50MHz;
 800094c:	2303      	movs	r3, #3
 800094e:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB,&g);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4619      	mov	r1, r3
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <sys_init+0x30>)
 8000956:	f7ff fd63 	bl	8000420 <GPIO_Init>

}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40010c00 	.word	0x40010c00

08000968 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800096c:	4a1a      	ldr	r2, [pc, #104]	; (80009d8 <SystemInit+0x70>)
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <SystemInit+0x70>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 8000978:	4917      	ldr	r1, [pc, #92]	; (80009d8 <SystemInit+0x70>)
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <SystemInit+0x70>)
 800097c:	685a      	ldr	r2, [r3, #4]
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <SystemInit+0x74>)
 8000980:	4013      	ands	r3, r2
 8000982:	604b      	str	r3, [r1, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000984:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <SystemInit+0x70>)
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <SystemInit+0x70>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800098e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000992:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000994:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <SystemInit+0x70>)
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <SystemInit+0x70>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <SystemInit+0x70>)
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <SystemInit+0x70>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009aa:	6053      	str	r3, [r2, #4]

#ifdef STM32F10X_CL
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 80009ac:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <SystemInit+0x70>)
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <SystemInit+0x70>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80009b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <SystemInit+0x70>)
 80009ba:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80009be:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <SystemInit+0x70>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80009c6:	f000 f80d 	bl	80009e4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <SystemInit+0x78>)
 80009cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d0:	609a      	str	r2, [r3, #8]
#endif 
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000
 80009dc:	f0ff0000 	.word	0xf0ff0000
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80009e8:	f000 f802 	bl	80009f0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80009fe:	4a47      	ldr	r2, [pc, #284]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000a00:	4b46      	ldr	r3, [pc, #280]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a08:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000a0a:	4b44      	ldr	r3, [pc, #272]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a12:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3301      	adds	r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d103      	bne.n	8000a28 <SetSysClockTo72+0x38>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a26:	d1f0      	bne.n	8000a0a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000a28:	4b3c      	ldr	r3, [pc, #240]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000a34:	2301      	movs	r3, #1
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	e001      	b.n	8000a3e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d166      	bne.n	8000b12 <SetSysClockTo72+0x122>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000a44:	4a36      	ldr	r2, [pc, #216]	; (8000b20 <SetSysClockTo72+0x130>)
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <SetSysClockTo72+0x130>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000a50:	4a33      	ldr	r2, [pc, #204]	; (8000b20 <SetSysClockTo72+0x130>)
 8000a52:	4b33      	ldr	r3, [pc, #204]	; (8000b20 <SetSysClockTo72+0x130>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f023 0303 	bic.w	r3, r3, #3
 8000a5a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000a5c:	4a30      	ldr	r2, [pc, #192]	; (8000b20 <SetSysClockTo72+0x130>)
 8000a5e:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <SetSysClockTo72+0x130>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f043 0302 	orr.w	r3, r3, #2
 8000a66:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000a68:	4a2c      	ldr	r2, [pc, #176]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000a70:	4a2a      	ldr	r2, [pc, #168]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000a72:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000a78:	4a28      	ldr	r2, [pc, #160]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000a7a:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a82:	6053      	str	r3, [r2, #4]
#ifdef STM32F10X_CL
    /* Configure PLLs ------------------------------------------------------*/
    /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
    /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
        
    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 8000a84:	4925      	ldr	r1, [pc, #148]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000a86:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a8a:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <SetSysClockTo72+0x134>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	62cb      	str	r3, [r1, #44]	; 0x2c
                              RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 8000a90:	4a22      	ldr	r2, [pc, #136]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a96:	f443 3383 	orr.w	r3, r3, #67072	; 0x10600
 8000a9a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000a9e:	62d3      	str	r3, [r2, #44]	; 0x2c
                             RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
  
    /* Enable PLL2 */
    RCC->CR |= RCC_CR_PLL2ON;
 8000aa0:	4a1e      	ldr	r2, [pc, #120]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aaa:	6013      	str	r3, [r2, #0]
    /* Wait till PLL2 is ready */
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 8000aac:	bf00      	nop
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d0f9      	beq.n	8000aae <SetSysClockTo72+0xbe>
    {
    }
    
   
    /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 8000aba:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000ac4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 8000ac6:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000ad0:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000adc:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ade:	bf00      	nop
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f9      	beq.n	8000ae0 <SetSysClockTo72+0xf0>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000aec:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f023 0303 	bic.w	r3, r3, #3
 8000af6:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000af8:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000b04:	bf00      	nop
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <SetSysClockTo72+0x12c>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f003 030c 	and.w	r3, r3, #12
 8000b0e:	2b08      	cmp	r3, #8
 8000b10:	d1f9      	bne.n	8000b06 <SetSysClockTo72+0x116>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40022000 	.word	0x40022000
 8000b24:	fffef000 	.word	0xfffef000

08000b28 <__libc_init_array>:
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	2500      	movs	r5, #0
 8000b2c:	4e0c      	ldr	r6, [pc, #48]	; (8000b60 <__libc_init_array+0x38>)
 8000b2e:	4c0d      	ldr	r4, [pc, #52]	; (8000b64 <__libc_init_array+0x3c>)
 8000b30:	1ba4      	subs	r4, r4, r6
 8000b32:	10a4      	asrs	r4, r4, #2
 8000b34:	42a5      	cmp	r5, r4
 8000b36:	d109      	bne.n	8000b4c <__libc_init_array+0x24>
 8000b38:	f000 f822 	bl	8000b80 <_init>
 8000b3c:	2500      	movs	r5, #0
 8000b3e:	4e0a      	ldr	r6, [pc, #40]	; (8000b68 <__libc_init_array+0x40>)
 8000b40:	4c0a      	ldr	r4, [pc, #40]	; (8000b6c <__libc_init_array+0x44>)
 8000b42:	1ba4      	subs	r4, r4, r6
 8000b44:	10a4      	asrs	r4, r4, #2
 8000b46:	42a5      	cmp	r5, r4
 8000b48:	d105      	bne.n	8000b56 <__libc_init_array+0x2e>
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b50:	4798      	blx	r3
 8000b52:	3501      	adds	r5, #1
 8000b54:	e7ee      	b.n	8000b34 <__libc_init_array+0xc>
 8000b56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b5a:	4798      	blx	r3
 8000b5c:	3501      	adds	r5, #1
 8000b5e:	e7f2      	b.n	8000b46 <__libc_init_array+0x1e>
 8000b60:	08000b98 	.word	0x08000b98
 8000b64:	08000b98 	.word	0x08000b98
 8000b68:	08000b98 	.word	0x08000b98
 8000b6c:	08000b9c 	.word	0x08000b9c

08000b70 <memset>:
 8000b70:	4603      	mov	r3, r0
 8000b72:	4402      	add	r2, r0
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d100      	bne.n	8000b7a <memset+0xa>
 8000b78:	4770      	bx	lr
 8000b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8000b7e:	e7f9      	b.n	8000b74 <memset+0x4>

08000b80 <_init>:
 8000b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b82:	bf00      	nop
 8000b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b86:	bc08      	pop	{r3}
 8000b88:	469e      	mov	lr, r3
 8000b8a:	4770      	bx	lr

08000b8c <_fini>:
 8000b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8e:	bf00      	nop
 8000b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b92:	bc08      	pop	{r3}
 8000b94:	469e      	mov	lr, r3
 8000b96:	4770      	bx	lr
